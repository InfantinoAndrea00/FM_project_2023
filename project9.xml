<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/**
 * Constants
 */

const int SLOTS = 110;
const int STATIONS = 6;
const int IN_SENSORS = 6; 
const int OUT_SENSORS = 5;
      
typedef int[0, SLOTS - 1] SlotId;
typedef int[0, STATIONS - 1] StationId;
typedef int[0, IN_SENSORS - 1] InSensorId;
typedef int[0, OUT_SENSORS - 1] OutSensorId;

const SlotId CONTROLLER_POS = 64;
const SlotId BRANCH_FIRST_POS = 86;
const SlotId MERGE_POS = 103;
const SlotId POS_IN_SENSORS[IN_SENSORS] = {13, 34, 64, 77, 93, 107};
const SlotId POS_STATIONS[STATIONS] = {17, 38, 81, 88, 97, 109};
const InSensorId IN_SENSOR_OF_OUT_SENSOR[OUT_SENSORS] = {0, 1, 3, 4, 5};

const SlotId POS_IN_SENSORS_IN_ORDER[STATIONS] = {POS_IN_SENSORS[0], POS_IN_SENSORS[1], POS_IN_SENSORS[3], POS_IN_SENSORS[2], POS_IN_SENSORS[4], POS_IN_SENSORS[5]};
const OutSensorId OUT_SENSORS_ID_IN_ORDER[STATIONS] = {1, 2, 4, 3, 4, 0};
const InSensorId IN_SENSORS_ID_IN_ORDER[STATIONS] = {0, 1, 3, 2, 4, 5};
const StationId IN_SENSORS_STATION[IN_SENSORS] = {0, 1, 3, 2, 4, 5};

/**
 * Channels
 */

broadcast chan tick, tick_sensor, tick_belt, initialize, station_free[STATIONS], station_busy[STATIONS];
broadcast chan switch_branch;

/**
 * Variables
 */

bool slot_busy[SLOTS];                 // true = busy; false = free;
bool in_sensors_state[IN_SENSORS];     // true = locked; false = unlocked;
bool out_sensors_state[OUT_SENSORS];   // true = queue is full; false = can send piece;

/**
 * Verification
 */

bool check_queue(const OutSensorId id, const SlotId position) {
    int i;
    for (i = position - 1; i &lt;= POS_IN_SENSORS[IN_SENSOR_OF_OUT_SENSOR[id]]; i++)
        if (!slot_busy[i])
            return true;
    return false;
}

bool check_out_sensor(const StationId id) {
    // Station in done and outSensor unlocked (should be true for a little time...)
    return !out_sensors_state[OUT_SENSORS_ID_IN_ORDER[id]];
}

bool check_in_sensor(const StationId id) {
    // Station in Idle and inSensor locked
    return in_sensors_state[IN_SENSORS_ID_IN_ORDER[id]];
}

bool check_station(const StationId id) {
    int i;
    int num_of_pieces = 0;
    for (i = id != 3 ? POS_IN_SENSORS_IN_ORDER[id] + 1 : BRANCH_FIRST_POS; i &lt;= POS_STATIONS[id]; i++)
        if (slot_busy[i])
            num_of_pieces++;
        if (num_of_pieces &gt; 1)
            return false;
    return true;
}</declaration>
	<template>
		<name>Initializer</name>
		<parameter>const int[1, 12] n_disks</parameter>
		<declaration>clock x;

/**    Set the entire System on the initial configuration    **/
void init_system() {
    SlotId i = POS_IN_SENSORS[0];
    for(d : int[0, n_disks-1]) {
        slot_busy[i-d] = true;
    }
}</declaration>
		<location id="id0" x="-178" y="-170">
			<committed/>
		</location>
		<location id="id1" x="-178" y="-34">
			<name x="-280" y="-51">run_state</name>
			<label kind="invariant" x="-161" y="-42">x &lt;= 1</label>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-195" y="25">x &gt;= 1</label>
			<label kind="synchronisation" x="-195" y="42">tick!</label>
			<label kind="assignment" x="-195" y="59">x = 0</label>
			<nail x="-144" y="25"/>
			<nail x="-204" y="25"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-170" y="-136">initialize!</label>
			<label kind="assignment" x="-170" y="-119">x = 0,
init_system()</label>
		</transition>
	</template>
	<template>
		<name>Motor</name>
		<parameter>int speed</parameter>
		<declaration>int time;

void check_speed() {
    if (speed &lt; 2)
        speed = 2;
}
</declaration>
		<location id="id4" x="-204" y="-476">
		</location>
		<location id="id5" x="-204" y="-382">
		</location>
		<location id="id6" x="-127" y="-289">
			<committed/>
		</location>
		<location id="id7" x="-204" y="-195">
		</location>
		<location id="id8" x="-280" y="-289">
			<committed/>
		</location>
		<init ref="id4"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-331" y="-348">tick_belt!</label>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-289" y="-246">tick?</label>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-153" y="-246">tick_sensor!</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-153" y="-374">time &gt;= speed - 2</label>
			<label kind="synchronisation" x="-153" y="-357">tick?</label>
			<label kind="assignment" x="-153" y="-340">time = 0</label>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-399" y="-408">time &lt; speed - 2</label>
			<label kind="synchronisation" x="-306" y="-391">tick?</label>
			<label kind="assignment" x="-323" y="-374">time ++</label>
			<nail x="-255" y="-357"/>
			<nail x="-255" y="-408"/>
		</transition>
		<transition id="id14">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-195" y="-450">initialize?</label>
			<label kind="assignment" x="-195" y="-433">time = 0, check_speed()</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const StationId station_id, const SlotId slot_id, const int elaboration_time, const SlotId in_sensor_slot, const OutSensorId out_sensor_id, const double stdDeviation</parameter>
		<declaration>int time;
SlotId first_proc_slot;

const double PI = 3.14;
int stochasticProcessingTime;

/**    Set the Station on the initial configuration    **/
void init_station() {
    if(in_sensor_slot == CONTROLLER_POS)
        first_proc_slot = BRANCH_FIRST_POS;
    else
        first_proc_slot = in_sensor_slot + 1;
}

/**    Produce a disk and place it on the next slot    **/
void complete_elaboration() {
    slot_busy[slot_id] = false;
    if (slot_id == SLOTS-1)
        slot_busy[0] = true;
    else
        slot_busy[slot_id + 1] = true;
}

/**    Check whether the next slot is free to receive a disk or not    **/
bool next_slot_is_free() {
    if (slot_id == SLOTS-1) {
        if (!slot_busy[0])
            return true;
    }
    else {
        if (!slot_busy[slot_id+1])
            return true;
    }
    return false;
}

/**    Value generator according to a Normal distribution    **/
double stdNormal(){
    return sqrt(-2 * ln(1 - random(1))) * cos(2*PI * random (1));
}

double Normal (double mean, double stdDev) {
    return mean + stdDev * stdNormal();
}

int f() {
    double var = Normal (elaboration_time, stdDeviation);
    if (var &lt;= 0) {
        var = 1;
    }
    
    return fint(var);
}</declaration>
		<location id="id15" x="1470" y="-306">
			<name x="1411" y="-340">Start</name>
		</location>
		<location id="id16" x="1470" y="-171">
			<name x="1419" y="-204">Idle</name>
		</location>
		<location id="id17" x="1972" y="144">
			<name x="1997" y="161">Pre_processing</name>
		</location>
		<location id="id18" x="1470" y="144">
			<name x="1368" y="110">Processing</name>
		</location>
		<location id="id19" x="965" y="146">
			<name x="909" y="161">Done</name>
		</location>
		<location id="id20" x="1972" y="-171">
			<name x="1989" y="-204">C1</name>
			<committed/>
		</location>
		<location id="id21" x="965" y="-170">
			<name x="935" y="-204">C2</name>
			<committed/>
		</location>
		<init ref="id15"/>
		<transition id="id22">
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="guard" x="1343" y="246">time &lt; stochasticProcessingTime - 1</label>
			<label kind="synchronisation" x="1445" y="212">tick?</label>
			<label kind="assignment" x="1445" y="229">time ++</label>
			<nail x="1419" y="212"/>
			<nail x="1521" y="212"/>
		</transition>
		<transition id="id23">
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="977" y="-34">!out_sensors_state[out_sensor_id] &amp;&amp; next_slot_is_free()</label>
			<label kind="synchronisation" x="977" y="-17">tick_sensor?</label>
		</transition>
		<transition id="id24">
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="guard" x="1513" y="-195">slot_busy[first_proc_slot] &amp;&amp; !slot_busy[slot_id]</label>
			<label kind="synchronisation" x="1513" y="-212">tick_sensor?</label>
		</transition>
		<transition id="id25">
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="1479" y="-59">slot_busy[slot_id]</label>
			<label kind="synchronisation" x="1479" y="0">tick_sensor?</label>
			<label kind="assignment" x="1479" y="-42">time = 0, 
stochasticProcessingTime = f()</label>
		</transition>
		<transition id="id26">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="1632" y="153">slot_busy[slot_id]</label>
			<label kind="synchronisation" x="1632" y="212">tick_sensor?</label>
			<label kind="assignment" x="1632" y="170">time = 0, 
stochasticProcessingTime = f()</label>
		</transition>
		<transition id="id27">
			<source ref="id21"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="1122" y="-212">station_free[station_id]!</label>
			<label kind="assignment" x="1122" y="-195">complete_elaboration()</label>
		</transition>
		<transition id="id28">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="1989" y="-42">station_busy[station_id]!</label>
		</transition>
		<transition id="id29">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="1028" y="170">time &gt;= stochasticProcessingTime - 1</label>
			<label kind="synchronisation" x="1028" y="153">tick?</label>
		</transition>
		<transition id="id30">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="1479" y="-263">initialize?</label>
			<label kind="assignment" x="1479" y="-246">init_station()</label>
		</transition>
	</template>
	<template>
		<name>InSensor</name>
		<parameter>const InSensorId id, const StationId station_controlled, const int working, const int broken</parameter>
		<location id="id31" x="85" y="-451">
			<name x="102" y="-484">Unlocked</name>
			<committed/>
		</location>
		<location id="id32" x="85" y="-127">
			<name x="17" y="-110">Locked</name>
			<committed/>
		</location>
		<location id="id33" x="85" y="-569">
			<name x="75" y="-603">Start</name>
		</location>
		<location id="id34" x="373" y="-272">
			<name x="339" y="-306">C2</name>
		</location>
		<location id="id35" x="569" y="-272">
			<name x="577" y="-306">C1</name>
		</location>
		<location id="id36" x="-357" y="-306">
			<name x="-391" y="-340">C4</name>
		</location>
		<location id="id37" x="-187" y="-306">
			<name x="-221" y="-340">C3</name>
		</location>
		<branchpoint id="id38" x="-272" y="-229"/>
		<branchpoint id="id39" x="475" y="-365"/>
		<init ref="id33"/>
		<transition id="id40">
			<source ref="id35"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="595" y="-263">tick_belt?</label>
			<nail x="662" y="-272"/>
			<nail x="662" y="-450"/>
		</transition>
		<transition id="id41">
			<source ref="id36"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-272" y="-119">tick_belt?</label>
			<nail x="-450" y="-305"/>
			<nail x="-450" y="-127"/>
		</transition>
		<transition id="id42">
			<source ref="id37"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-25" y="-391">tick_sensor?</label>
			<label kind="assignment" x="-153" y="-374">in_sensors_state[id] = false</label>
			<nail x="84" y="-306"/>
		</transition>
		<transition id="id43">
			<source ref="id38"/>
			<target ref="id37"/>
			<label kind="probability" x="-213" y="-263">broken</label>
		</transition>
		<transition id="id44">
			<source ref="id38"/>
			<target ref="id36"/>
			<label kind="probability" x="-382" y="-263">working</label>
		</transition>
		<transition id="id45" controllable="false">
			<source ref="id32"/>
			<target ref="id38"/>
			<nail x="51" y="-153"/>
			<nail x="-272" y="-153"/>
		</transition>
		<transition id="id46">
			<source ref="id35"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="212" y="-118">station_busy[station_controlled]?</label>
			<label kind="assignment" x="212" y="-101">in_sensors_state[id] = true</label>
			<nail x="569" y="-127"/>
		</transition>
		<transition id="id47">
			<source ref="id39"/>
			<target ref="id35"/>
			<label kind="probability" x="526" y="-348">working</label>
		</transition>
		<transition id="id48">
			<source ref="id39"/>
			<target ref="id34"/>
			<label kind="probability" x="365" y="-348">broken</label>
		</transition>
		<transition id="id49" controllable="false">
			<source ref="id31"/>
			<target ref="id39"/>
			<nail x="111" y="-425"/>
			<nail x="475" y="-425"/>
		</transition>
		<transition id="id50">
			<source ref="id36"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-272" y="-493">station_free[station_controlled]?</label>
			<label kind="assignment" x="-273" y="-476">in_sensors_state[id] = false</label>
			<nail x="-357" y="-450"/>
		</transition>
		<transition id="id51">
			<source ref="id34"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="102" y="-221">tick_sensor?</label>
			<label kind="assignment" x="102" y="-204">in_sensors_state[id] = true</label>
			<nail x="85" y="-272"/>
		</transition>
		<transition id="id52">
			<source ref="id33"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="102" y="-535">initialize?</label>
			<label kind="assignment" x="101" y="-518">in_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name>OutSensor</name>
		<parameter>const OutSensorId id, const SlotId position, const int working, const int broken</parameter>
		<location id="id53" x="-153" y="-434">
			<name x="-136" y="-467">Unlocked</name>
			<committed/>
		</location>
		<location id="id54" x="-153" y="-110">
			<name x="-221" y="-93">Locked</name>
			<committed/>
		</location>
		<location id="id55" x="-153" y="-552">
			<name x="-163" y="-586">Start</name>
		</location>
		<location id="id56" x="135" y="-255">
			<name x="101" y="-289">C2</name>
		</location>
		<location id="id57" x="331" y="-255">
			<name x="339" y="-289">C1</name>
		</location>
		<location id="id58" x="-595" y="-289">
			<name x="-629" y="-323">C4</name>
		</location>
		<location id="id59" x="-425" y="-289">
			<name x="-459" y="-323">C3</name>
		</location>
		<branchpoint id="id60" x="-510" y="-212"/>
		<branchpoint id="id61" x="237" y="-348"/>
		<init ref="id55"/>
		<transition id="id62">
			<source ref="id57"/>
			<target ref="id53"/>
			<label kind="guard" x="356" y="-229">!slot_busy[position]</label>
			<label kind="synchronisation" x="357" y="-246">tick_belt?</label>
			<nail x="424" y="-255"/>
			<nail x="424" y="-433"/>
		</transition>
		<transition id="id63">
			<source ref="id58"/>
			<target ref="id54"/>
			<label kind="guard" x="-510" y="-85">slot_busy[position]</label>
			<label kind="synchronisation" x="-510" y="-102">tick_belt?</label>
			<nail x="-688" y="-288"/>
			<nail x="-688" y="-110"/>
		</transition>
		<transition id="id64">
			<source ref="id59"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-263" y="-374">tick_sensor?</label>
			<label kind="assignment" x="-408" y="-357">out_sensors_state[id] = false</label>
			<nail x="-154" y="-289"/>
		</transition>
		<transition id="id65">
			<source ref="id60"/>
			<target ref="id59"/>
			<label kind="probability" x="-451" y="-246">broken</label>
		</transition>
		<transition id="id66">
			<source ref="id60"/>
			<target ref="id58"/>
			<label kind="probability" x="-620" y="-246">working</label>
		</transition>
		<transition id="id67" controllable="false">
			<source ref="id54"/>
			<target ref="id60"/>
			<nail x="-187" y="-136"/>
			<nail x="-510" y="-136"/>
		</transition>
		<transition id="id68">
			<source ref="id57"/>
			<target ref="id54"/>
			<label kind="guard" x="8" y="-68">slot_busy[position]</label>
			<label kind="synchronisation" x="8" y="-102">tick_sensor?</label>
			<label kind="assignment" x="8" y="-85">out_sensors_state[id] = true</label>
			<nail x="331" y="-110"/>
		</transition>
		<transition id="id69">
			<source ref="id61"/>
			<target ref="id57"/>
			<label kind="probability" x="288" y="-331">working</label>
		</transition>
		<transition id="id70">
			<source ref="id61"/>
			<target ref="id56"/>
			<label kind="probability" x="127" y="-331">broken</label>
		</transition>
		<transition id="id71" controllable="false">
			<source ref="id53"/>
			<target ref="id61"/>
			<nail x="-127" y="-408"/>
			<nail x="237" y="-408"/>
		</transition>
		<transition id="id72">
			<source ref="id58"/>
			<target ref="id53"/>
			<label kind="guard" x="-485" y="-459">!slot_busy[position]</label>
			<label kind="synchronisation" x="-484" y="-493">tick_sensor?</label>
			<label kind="assignment" x="-485" y="-476">out_sensors_state[id] = false</label>
			<nail x="-595" y="-433"/>
		</transition>
		<transition id="id73">
			<source ref="id56"/>
			<target ref="id54"/>
			<label kind="synchronisation" x="-136" y="-204">tick_sensor?</label>
			<label kind="assignment" x="-136" y="-187">out_sensors_state[id] = true</label>
			<nail x="-153" y="-255"/>
		</transition>
		<transition id="id74">
			<source ref="id55"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-136" y="-518">initialize?</label>
			<label kind="assignment" x="-137" y="-501">out_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>bool take_branch;

/**    Get the id of the In-Sensor at position "pos"    **/
InSensorId get_sensor_id(SlotId pos) {
    for(i : InSensorId)
        if(POS_IN_SENSORS[i] == pos)
            return i;
    return 0;
}

/**    Get the slot type at position "slot" (0 = normal slot; 1 = station; 2 = In-Sensor)    **/
int[0, 2] get_slot_type(const SlotId slot) {
    for(i : StationId)
        if(slot == POS_STATIONS[i])
            return 1;
    
    for(i : InSensorId)
        if(slot == POS_IN_SENSORS[i])
            return 2;

    return 0;
}

/**    Move the disk from position "prev_slot" to position "curr_slot", if possible    **/
void try_move(SlotId old_pos, SlotId new_pos) {
    if(slot_busy[old_pos] &amp;&amp; !slot_busy[new_pos]) {
        slot_busy[old_pos] = false;
        slot_busy[new_pos] = true;
    } 
}

/**    Handle the two slots where the two alternative branches begin (positions 65 and 86)    **/
void manage_branch() {
    if(!in_sensors_state[2]) {
        if(take_branch)
            try_move(CONTROLLER_POS, BRANCH_FIRST_POS);
        else
            try_move(CONTROLLER_POS, CONTROLLER_POS+1);
    }
}

/**    Move the entire Conveyor Belt, slot by slot (by decreasing id) and, where possible, shift the disks    **/
void update(){
    int[0, SLOTS] i = SLOTS;
    while(i &gt; 0) {
        i--;
        if(slot_busy[i] &amp;&amp; get_slot_type(i) != 1) {
            if(i == CONTROLLER_POS){
                manage_branch();
            }
            else {
                if(i == BRANCH_FIRST_POS-1){
                    try_move(i, MERGE_POS);
                }
                else {
                    if(get_slot_type(i) == 2) {
                        if(!in_sensors_state[get_sensor_id(i)])
                            try_move(i, i+1);
                    } 
                    else { 
                        try_move(i, i+1);
                    }
                }           
            }
        }
    }
}</declaration>
		<location id="id75" x="-3102" y="-2814">
		</location>
		<location id="id76" x="-3102" y="-2949">
		</location>
		<init ref="id76"/>
		<transition id="id77">
			<source ref="id75"/>
			<target ref="id75"/>
			<label kind="synchronisation" x="-3051" y="-2813">tick_belt?</label>
			<label kind="assignment" x="-3051" y="-2830">update()</label>
			<nail x="-3060" y="-2839"/>
			<nail x="-3060" y="-2788"/>
		</transition>
		<transition id="id78">
			<source ref="id75"/>
			<target ref="id75"/>
			<label kind="synchronisation" x="-3272" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-3374" y="-2813">take_branch = !take_branch</label>
			<nail x="-3145" y="-2788"/>
			<nail x="-3145" y="-2839"/>
		</transition>
		<transition id="id79">
			<source ref="id76"/>
			<target ref="id75"/>
			<label kind="synchronisation" x="-3094" y="-2907">initialize?</label>
			<label kind="assignment" x="-3094" y="-2890">take_branch = false</label>
		</transition>
	</template>
	<template>
		<name>FlowController_0</name>
		<parameter>const int[0, 109] pos_out_sensor_2, const int[0, 109] pos_out_sensor_3</parameter>
		<declaration>bool queue_2_full() {
    int i = POS_IN_SENSORS[3];
    while (i &gt;= pos_out_sensor_2) {
        if (!slot_busy[i]) return false;
        i--;
    }
    return true;
}

bool queue_4_full() {
    int i = POS_IN_SENSORS[4];
    while (i &gt;= pos_out_sensor_3) {
        if (!slot_busy[i]) return false;
        i--;
    }
    return true;
}</declaration>
		<location id="id80" x="-2244" y="-2116">
			<name x="-2346" y="-2150">Not_Taken_0</name>
		</location>
		<location id="id81" x="-2074" y="-2192">
			<urgent/>
		</location>
		<location id="id82" x="-1904" y="-2116">
			<name x="-1887" y="-2133">Taken_0</name>
		</location>
		<location id="id83" x="-2074" y="-2039">
			<urgent/>
		</location>
		<location id="id84" x="-2567" y="-2116">
			<name x="-2609" y="-2150">Start</name>
		</location>
		<init ref="id84"/>
		<transition id="id85">
			<source ref="id84"/>
			<target ref="id80"/>
			<label kind="synchronisation" x="-2465" y="-2107">initialize?</label>
		</transition>
		<transition id="id86">
			<source ref="id83"/>
			<target ref="id80"/>
			<label kind="synchronisation" x="-2295" y="-2082">switch_branch!</label>
		</transition>
		<transition id="id87">
			<source ref="id82"/>
			<target ref="id83"/>
			<label kind="guard" x="-1980" y="-2057">slot_busy[POS_STATIONS[3]] &amp;&amp; queue_4_full()</label>
			<label kind="synchronisation" x="-1980" y="-2074">tick_sensor?</label>
		</transition>
		<transition id="id88">
			<source ref="id81"/>
			<target ref="id82"/>
			<label kind="synchronisation" x="-2006" y="-2184">switch_branch!</label>
		</transition>
		<transition id="id89">
			<source ref="id80"/>
			<target ref="id81"/>
			<label kind="guard" x="-2235" y="-2210">queue_2_full()</label>
			<label kind="synchronisation" x="-2218" y="-2193">tick_sensor?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">FlowController_1</name>
		<location id="id90" x="-3553" y="-3595">
			<name x="-3536" y="-3620">Not_Taken_1</name>
		</location>
		<location id="id91" x="-3757" y="-3595">
			<name x="-3808" y="-3629">Start</name>
		</location>
		<init ref="id91"/>
		<transition id="id92">
			<source ref="id91"/>
			<target ref="id90"/>
			<label kind="synchronisation" x="-3714" y="-3586">initialize?</label>
		</transition>
	</template>
	<template>
		<name>FlowController_2</name>
		<location id="id93" x="-2074" y="-2210">
			<name x="-2057" y="-2236">Taken_2</name>
		</location>
		<location id="id94" x="-2260" y="-2210">
			<committed/>
		</location>
		<location id="id95" x="-2422" y="-2210">
			<name x="-2432" y="-2244">Start</name>
		</location>
		<init ref="id95"/>
		<transition id="id96">
			<source ref="id95"/>
			<target ref="id94"/>
			<label kind="synchronisation" x="-2388" y="-2201">initialize?</label>
		</transition>
		<transition id="id97">
			<source ref="id94"/>
			<target ref="id93"/>
			<label kind="synchronisation" x="-2235" y="-2235">switch_branch!</label>
		</transition>
	</template>
	<template>
		<name>FlowController_3</name>
		<location id="id98" x="-2337" y="-2329">
			<name x="-2438" y="-2362">Not_Taken_3</name>
		</location>
		<location id="id99" x="-2166" y="-2405">
			<urgent/>
		</location>
		<location id="id100" x="-2014" y="-2320">
			<name x="-2006" y="-2354">Taken_3</name>
		</location>
		<location id="id101" x="-2166" y="-2243">
			<urgent/>
		</location>
		<location id="id102" x="-2635" y="-2329">
			<name x="-2686" y="-2363">Start</name>
		</location>
		<init ref="id102"/>
		<transition id="id103">
			<source ref="id102"/>
			<target ref="id98"/>
			<label kind="synchronisation" x="-2541" y="-2320">initialize?</label>
		</transition>
		<transition id="id104">
			<source ref="id100"/>
			<target ref="id101"/>
			<label kind="guard" x="-2091" y="-2269">slot_busy[BRANCH_FIRST_POS]</label>
			<label kind="synchronisation" x="-2091" y="-2252">tick_sensor?</label>
		</transition>
		<transition id="id105">
			<source ref="id101"/>
			<target ref="id98"/>
			<label kind="synchronisation" x="-2363" y="-2269">switch_branch!</label>
		</transition>
		<transition id="id106">
			<source ref="id99"/>
			<target ref="id100"/>
			<label kind="synchronisation" x="-2099" y="-2414">switch_branch!</label>
		</transition>
		<transition id="id107">
			<source ref="id98"/>
			<target ref="id99"/>
			<label kind="guard" x="-2456" y="-2431">slot_busy[CONTROLLER_POS+1]</label>
			<label kind="synchronisation" x="-2269" y="-2414">tick_sensor?</label>
		</transition>
	</template>
	<system>                                                     /**********************************************************************************/
                                                     /***   CONFIGURATION: Change here the Configuration Parameters of the plant:     ***/
                                                     /**********************************************************************************/
                                                     /***     Speed of the Conveyor Belt (Slots per Unit of Time):                     ***/
const int SPEED =                                    /***/     1                                                                       ;/***/
                                                     /***     Number of Disks:                                                          ***/
const int[1, 12] DISKS =                             /***/     12                                                                      ;/***/
                                                     /***/                                                                              /***/
                                                     /***     Positions of the 5 Out-Sensors:                                          ***/
const SlotId POS_OUT_SENSORS[OUT_SENSORS] = {        /***/     2    /** ID: 0 (1st) */                                                ,/***/
                                                     /***/     24   /** ID: 1 (2nd) */                                                ,/***/
                                                     /***/     68   /** ID: 2 (3rd) */                                                ,/***/
                                                     /***/     90   /** ID: 3 (4th) */                                                ,/***/
                                                     /***/     105  /** ID: 4 (5th) */                                               };/***/
                                                     /***/                                                                              /***/
                                                     /***     Elaboration Times of the 6 Stations:                                     ***/
const int STATIONS_ELABORATION_TIME[STATIONS] = {    /***/     3    /** ID: 0 (1st)*/                                                 ,/***/
                                                     /***/     4    /** ID: 1 (2nd)*/                                                 ,/***/
                                                     /***/     5    /** ID: 2 (3rd)*/                                                 ,/***/
                                                     /***/     6    /** ID: 3 (4th)*/                                                 ,/***/
                                                     /***/     7    /** ID: 4 (5th)*/                                                 ,/***/
                                                     /***/     8    /** ID: 5 (6nd)*/                                                };/***/
                                                     /***/                                                                              /***/
                                                     /***     Standard Deviation of the Elaboration Time of the 6 Stations:           ***/
const double STD_DEV_STATIONS[STATIONS] = {          /***/     1.0  /** ID: 0 (1st)*/                                                 ,/***/
                                                     /***/     1.0  /** ID: 1 (2nd)*/                                                 ,/***/
                                                     /***/     1.0  /** ID: 2 (3rd)*/                                                 ,/***/
                                                     /***/     1.0  /** ID: 3 (4th)*/                                                 ,/***/
                                                     /***/     1.0  /** ID: 4 (5th)*/                                                 ,/***/
                                                     /***/     1.0  /** ID: 5 (6nd)*/                                                };/***/
                                                     /***/                                                                              /***/
                                                     /***     Probabilistic Error of the 6 In-Sensors:                                 ***/
const int IN_SENSORS_ERR[IN_SENSORS] = {             /***/     1    /** ID: 0 (1st)*/                                                 ,/***/
                                                     /***/     1    /** ID: 1 (2nd)*/                                                 ,/***/
                                                     /***/     1    /** ID: 2 (3rd)*/                                                 ,/***/
                                                     /***/     1    /** ID: 3 (4th)*/                                                 ,/***/
                                                     /***/     1    /** ID: 4 (5th)*/                                                 ,/***/
                                                     /***/     1    /** ID: 5 (6nd)*/                                                };/***/
                                                     /***/                                                                              /***/
                                                     /***     Probabilistic Right of the 6 In-Sensors:                                 ***/
const int IN_SENSORS_RIGHT[IN_SENSORS] = {           /***/     99   /** ID: 0 (1st)*/                                                 ,/***/
                                                     /***/     99   /** ID: 1 (2nd)*/                                                 ,/***/
                                                     /***/     99   /** ID: 2 (3rd)*/                                                 ,/***/
                                                     /***/     99   /** ID: 3 (4th)*/                                                 ,/***/
                                                     /***/     99   /** ID: 4 (5th)*/                                                 ,/***/
                                                     /***/     99   /** ID: 5 (6nd)*/                                                };/***/
                                                     /***/                                                                              /***/
                                                     /***     Probabilistic Error of the 5 Out-Sensors:                                ***/
const int OUT_SENSORS_ERR[OUT_SENSORS] = {           /***/     1    /** ID: 0 (1st)*/                                                 ,/***/
                                                     /***/     1    /** ID: 1 (2nd)*/                                                 ,/***/
                                                     /***/     1    /** ID: 2 (3rd)*/                                                 ,/***/
                                                     /***/     1    /** ID: 3 (4th)*/                                                 ,/***/
                                                     /***/     1    /** ID: 4 (5th)*/                                                };/***/
                                                     /***/                                                                              /***/
                                                     /***     Probabilistic Right of the 5 Out-Sensors:                                ***/
const int OUT_SENSORS_RIGHT[OUT_SENSORS] = {         /***/     99   /** ID: 0 (1st)*/                                                 ,/***/
                                                     /***/     99   /** ID: 1 (2nd)*/                                                 ,/***/
                                                     /***/     99   /** ID: 2 (3rd)*/                                                 ,/***/
                                                     /***/     99   /** ID: 3 (4th)*/                                                 ,/***/
                                                     /***/     99   /** ID: 4 (5th)*/                                                };/***/
                                                     /**********************************************************************************/

/**
 * System definition
 */

initializer = Initializer(DISKS);
motor = Motor(SPEED);
conveyorBelt = ConveyorBelt();
station(const StationId id) = Station(id, POS_STATIONS[id], STATIONS_ELABORATION_TIME[id], POS_IN_SENSORS_IN_ORDER[id], OUT_SENSORS_ID_IN_ORDER[id], STD_DEV_STATIONS[id]);
inSensor(const InSensorId id) = InSensor(id, IN_SENSORS_STATION[id], IN_SENSORS_RIGHT[id], IN_SENSORS_ERR[id]);
outSensor(const OutSensorId id) = OutSensor(id, POS_OUT_SENSORS[id], OUT_SENSORS_RIGHT[id], OUT_SENSORS_ERR[id]);
// flowController = FlowController_0(POS_OUT_SENSORS[2], POS_OUT_SENSORS[3]);
// flowController = FlowController_1();
// flowController = FlowController_2();
flowController = FlowController_3();

system initializer, motor, conveyorBelt, station, inSensor, outSensor, flowController;
</system>
	<queries>
		<query>
			<formula/>
			<comment>------ Mandatory properties ------</comment>
		</query>
		<query>
			<formula>Pr[&lt;=10000] ([] initializer.run_state imply ((sum(i : SlotId) slot_busy[i]) == DISKS))</formula>
			<comment>No spawn or disappear of disk

Verifies properties:
P1. it never happens that a station holds more than 1 piece;
P2. it never happens that two pieces occupy the same belt slot.</comment>
		</query>
		<query>
			<formula>Pr[&lt;=10000] ([] (forall(id : OutSensorId) outSensor(id).Locked imply check_queue(id, POS_OUT_SENSORS[id])))</formula>
			<comment>If the sensor is locked, at least one position between it's input sensor and the location right before it is free

Verifies property:
P3. No queue ever exceeds the maximum allowed length.</comment>
		</query>
		<query>
			<formula>Pr[&lt;=10000] ([]
 	not (
		(forall(id_s : StationId)   (station(id_s).Processing or station(id_s).Done)) &amp;&amp; 
		(forall(id_o : OutSensorId) (outSensor(id_o).Locked))                         &amp;&amp; 
		(forall(id_i : InSensorId)  (inSensor(id_i).Locked))
	)
)</formula>
			<comment>The idea is to mark as true this wrong behavior.

Verifies property:
P4. the plant never incurs in deadlock.</comment>
		</query>
		<query>
			<formula/>
			<comment>-------- Extra properties --------</comment>
		</query>
		<query>
			<formula>Pr[&lt;=10000] ([] forall(id : StationId) check_station(id))</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>---------- Simulations -----------</comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	station(0).Pre_processing + station(0).Processing * 2 + station(0).Done * 3,
	station(1).Pre_processing + station(1).Processing * 2 + station(1).Done * 3,
	station(2).Pre_processing + station(2).Processing * 2 + station(2).Done * 3,
	station(3).Pre_processing + station(3).Processing * 2 + station(3).Done * 3,
	station(4).Pre_processing + station(4).Processing * 2 + station(4).Done * 3,
	station(5).Pre_processing + station(5).Processing * 2 + station(5).Done * 3
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	outSensor(0).Locked + outSensor(0).C3 + outSensor(0).C4,
	outSensor(1).Locked + outSensor(1).C3 + outSensor(1).C4,
	outSensor(2).Locked + outSensor(2).C3 + outSensor(2).C4,
	outSensor(3).Locked + outSensor(3).C3 + outSensor(3).C4,
	outSensor(4).Locked + outSensor(4).C3 + outSensor(4).C4
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	inSensor(0).Locked + inSensor(0).C3 + inSensor(0).C4,
	inSensor(1).Locked + inSensor(1).C3 + inSensor(1).C4,
	inSensor(2).Locked + inSensor(2).C3 + inSensor(2).C4,
	inSensor(3).Locked + inSensor(3).C3 + inSensor(3).C4,
	inSensor(4).Locked + inSensor(4).C3 + inSensor(4).C4,
	inSensor(5).Locked + inSensor(5).C3 + inSensor(5).C4
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] { slot_busy[12], slot_busy[13] + 2, slot_busy[14] + 4, slot_busy[15] + 6, slot_busy[16] + 8, slot_busy[17] + 10, slot_busy[18] + 12, station(0).Processing + station(0).Done + 14, in_sensors_state[0] + 16 }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	inSensor(0).Unlocked,
	inSensor(0).C2 + 2,
	inSensor(0).Locked + 4,
	inSensor(0).C3 + 6
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=100] {(sum(p : int[14, 17]) slot_busy[p] == true)}</formula>
			<comment/>
		</query>
	</queries>
</nta>
