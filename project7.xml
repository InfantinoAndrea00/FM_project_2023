<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**
 * Constants
 */

const int SLOTS = 110;
    typedef int[0, SLOTS - 1] SlotId;
const int STATIONS = 6;
    typedef int[0, STATIONS - 1] StationId;
const int IN_SENSORS = 6; 
    typedef int[0, IN_SENSORS - 1] InSensorId;    /**********************************************************************************/
const int OUT_SENSORS = 5;                        /***   CONFIGURATION: Change here the Configuration Parameters of the plant:    ***/
    typedef int[0, OUT_SENSORS - 1] OutSensorId;  /**********************************************************************************/  
                                                  /***     Speed of the Conveyor Belt (Slots per Unit of Time):                   ***/       
const int SPEED =                                 /***/     1                                                                   ;/***/
                                                  /***     ID of the Policy followed by the Flow Controller:                      ***/ 
const int[0, 4] POLICY =                          /***/     0                                                                   ;/***/
                                                  /***     Number of Disks:                                                       ***/
const int[1, 12] DISKS =                          /***/     2                                                                   ;/***/
    typedef int[0, DISKS - 1] DiskId;             /***/                                                                          /***/
                                                  /***     Positions of the 5 Out-Sensors:                                        ***/
const SlotId POS_OUT_SENSORS[OUT_SENSORS] = {     /***/     2    /** ID: 0 (1st) */                                             ,/***/
                                                  /***/     24   /** ID: 1 (2nd) */                                             ,/***/
                                                  /***/     68   /** ID: 2 (3rd) */                                             ,/***/
                                                  /***/     90   /** ID: 3 (4th) */                                             ,/***/
                                                  /***/     105  /** ID: 4 (5th) */                                            };/***/
                                                  /***/                                                                          /***/
                                                  /***     Elaboration Times of the 6 Stations:                                   ***/            
const int STATIONS_ELABORATION_TIME[STATIONS] = { /***/     3    /** ID: 0 (1st)*/                                              ,/***/
                                                  /***/     3    /** ID: 1 (2nd)*/                                              ,/***/
                                                  /***/     3    /** ID: 2 (3rd)*/                                              ,/***/
                                                  /***/     3    /** ID: 3 (4th)*/                                              ,/***/
                                                  /***/     3    /** ID: 4 (5th)*/                                              ,/***/
                                                  /***/     3    /** ID: 5 (6nd)*/                                             };/***/
                                                  /**********************************************************************************/
const SlotId CONTROLLER_POS = 64;
const SlotId BRANCH_FIRST_POS = 86;
const SlotId MERGE_POS = 103;
const SlotId POS_IN_SENSORS[IN_SENSORS] = {13, 34, 64, 77, 93, 107};
const SlotId POS_STATIONS[STATIONS] = {17, 38, 81, 88, 97, 109};
const InSensorId IN_SENSOR_OF_OUT_SENSOR[OUT_SENSORS] = {0, 1, 3, 4, 5};

/**
 * Channels
 */

broadcast chan tick, initialize, station_free[STATIONS], station_busy[STATIONS];
broadcast chan switch_branch;

/**
 * Variables
 */

SlotId status[DISKS];
bool in_sensors_state[IN_SENSORS]; // true = locked; false = unlocked;
bool out_sensors_state[OUT_SENSORS]; // true = queue is full; false = can send piece;

/**
 * Functions
 */

int[-1, DISKS - 1] get_disk_on_slot(const SlotId slot) {
    for(d : DiskId)
        if(status[d] == slot)
            return d;
    return -1;
}

bool slot_busy(const SlotId slot) {
    return get_disk_on_slot(slot) != -1;
}

bool check_queue(const OutSensorId id, const SlotId position) {
    int i;
    for (i = position - 1; i &lt;= POS_IN_SENSORS[IN_SENSOR_OF_OUT_SENSOR[id]]; i++)
        if (!slot_busy(i))
            return true;
    return false;
}</declaration>
	<template>
		<name>OutSensor</name>
		<parameter>const OutSensorId id, const SlotId position</parameter>
		<declaration>
</declaration>
		<location id="id0" x="-34" y="-60">
			<name x="-25" y="-85">Unlocked</name>
		</location>
		<location id="id1" x="-34" y="136">
			<name x="-17" y="136">Locked</name>
		</location>
		<location id="id2" x="-34" y="-170">
			<name x="-44" y="-204">Start</name>
		</location>
		<location id="id3" x="59" y="34">
			<name x="68" y="0">C1</name>
			<urgent/>
		</location>
		<location id="id4" x="-136" y="34">
			<name x="-146" y="0">C2</name>
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-280" y="-42">!slot_busy(position)</label>
			<label kind="assignment" x="-340" y="-25">out_sensors_state[id] = false</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-263" y="76">slot_busy(position)</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-85" y="68">tick?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="25" y="76">slot_busy(position)</label>
			<label kind="assignment" x="25" y="93">out_sensors_state[id] = true</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="-25">!slot_busy(position)</label>
			<nail x="59" y="-59"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-34" y="-17">tick?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-25" y="-144">initialize?</label>
			<label kind="assignment" x="-25" y="-127">out_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>bool take_branch;

/**    Get the id of the In-Sensor at position "pos"    **/
InSensorId get_sensor_id(SlotId pos) {
    for(i : InSensorId)
        if(POS_IN_SENSORS[i] == pos)
            return i;
    return 0;
}


int[0, 2] get_slot_type(const SlotId slot) {
    for(i : StationId)
        if(slot == POS_STATIONS[i])
            return 1;
    
    for(i : InSensorId)
        if(slot == POS_IN_SENSORS[i])
            return 2;

    return 0;
}

/**    Move the disk from position "prev_slot" to position "curr_slot", if possible    **/
void try_move(DiskId disk, SlotId new_pos) {
    bool is_free = true;
    for(d : DiskId)
        if(status[d] == new_pos)
            is_free = false;

    if(is_free)
        status[disk] = new_pos;
}

/**    Handle the two slots where the two alternative branches begin (positions 65 and 86)    **/
void manage_branch(DiskId d) {
    if(!in_sensors_state[2]) {
        if(take_branch)
            try_move(d, BRANCH_FIRST_POS);
        else
            try_move(d, CONTROLLER_POS+1);
    }
}

/**    Move the entire Conveyor Belt, slot by slot (by decreasing id) and, where possible, shift the disks    **/
void update(){
    int[0, SLOTS] i = SLOTS;
    int[-1, DISKS-1] d;
    while(i &gt; 0) {
        i--;
        d = get_disk_on_slot(i);
        if(d != -1 &amp;&amp; get_slot_type(i) != 1) {
            if(i == CONTROLLER_POS){
                manage_branch(d);
            }
            else {
                if(i == BRANCH_FIRST_POS-1){
                    try_move(d, MERGE_POS);
                }
                else {
                    if(get_slot_type(i) == 2) {
                        if(!in_sensors_state[get_sensor_id(i)])
                            try_move(d, i+1);
                    } 
                    else { 
                        try_move(d, i+1);
                    }
                }           
            }
        }
    }
}</declaration>
		<location id="id5" x="-3102" y="-2814">
		</location>
		<location id="id6" x="-3102" y="-2949">
		</location>
		<location id="id7" x="-2898" y="-2813">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2847" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-2847" y="-2813">take_branch = !take_branch</label>
			<nail x="-2856" y="-2839"/>
			<nail x="-2856" y="-2788"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-3060" y="-2805">tick?</label>
			<label kind="assignment" x="-3060" y="-2779">update()</label>
			<nail x="-2932" y="-2779"/>
			<nail x="-3068" y="-2779"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-3085" y="-2839">tick?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-3264" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-3366" y="-2813">take_branch = !take_branch</label>
			<nail x="-3145" y="-2788"/>
			<nail x="-3145" y="-2847"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-3094" y="-2924">initialize?</label>
			<label kind="assignment" x="-3094" y="-2907">take_branch = false</label>
		</transition>
	</template>
	<template>
		<name>InSensor</name>
		<parameter>const InSensorId id, const StationId station_controlled</parameter>
		<location id="id8" x="-34" y="-365">
		</location>
		<location id="id9" x="-34" y="-255">
			<name x="-17" y="-272">Unlocked</name>
		</location>
		<location id="id10" x="-34" y="-59">
			<name x="-8" y="-59">Locked</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-442" y="-178">station_free[station_controlled]?</label>
			<label kind="assignment" x="-399" y="-161">in_sensors_state[id] = false</label>
			<nail x="-153" y="-102"/>
			<nail x="-153" y="-212"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="85" y="-178">station_busy[station_controlled]?</label>
			<label kind="assignment" x="85" y="-161">in_sensors_state[id] = true</label>
			<nail x="76" y="-212"/>
			<nail x="76" y="-93"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-25" y="-331">initialize?</label>
			<label kind="assignment" x="-25" y="-314">in_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>clock x;

/**    Set the entire System on the initial configuration    **/
void init_system() {
    SlotId i = POS_IN_SENSORS[0];
    for(d : DiskId) {
        status[d] = i;
        i--;
    }
}
</declaration>
		<location id="id11" x="-178" y="-170">
			<committed/>
		</location>
		<location id="id12" x="-178" y="-34">
			<name x="-280" y="-51">run_state</name>
			<label kind="invariant" x="-161" y="-42">x &lt;= SPEED</label>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-212" y="25">x &gt;= SPEED</label>
			<label kind="synchronisation" x="-195" y="42">tick!</label>
			<label kind="assignment" x="-195" y="59">x = 0</label>
			<nail x="-144" y="25"/>
			<nail x="-204" y="25"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-170" y="-136">initialize!</label>
			<label kind="assignment" x="-170" y="-119">x = 0,
init_system()</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const StationId station_id, const SlotId slot_id, const int elaboration_time, const SlotId in_sensor_slot, const OutSensorId out_sensor_id</parameter>
		<declaration>clock x;
SlotId first_proc_slot;

/**    Set the Station on the initial configuration    **/
void init_station() {
    if(in_sensor_slot == CONTROLLER_POS)
        first_proc_slot = BRANCH_FIRST_POS;
    else
        first_proc_slot = in_sensor_slot + 1;
}

/**    Produce a disk and place it on the next slot    **/
void complete_elaboration() {
    DiskId d = get_disk_on_slot(slot_id);

    if (slot_id == SLOTS-1)
        status[d] = 0;
    else
        status[d] = slot_id + 1;
}

/**    Check whether the next slot is free to receive a disk or not    **/
bool next_slot_is_free() {
    if (slot_id == SLOTS-1) {
        if (!slot_busy(0))
            return true;
    }
    else {
        if (!slot_busy(slot_id+1))
            return true;
    }
    return false;
}</declaration>
		<location id="id13" x="-8" y="-255">
			<name x="-18" y="-289">Start</name>
		</location>
		<location id="id14" x="-8" y="-136">
			<name x="0" y="-161">Idle</name>
		</location>
		<location id="id15" x="467" y="68">
			<name x="484" y="60">Pre_processing</name>
		</location>
		<location id="id16" x="-161" y="67">
			<name x="-195" y="76">Processing</name>
			<label kind="invariant" x="-246" y="93">x &lt;= elaboration_time</label>
		</location>
		<location id="id17" x="-569" y="68">
			<name x="-620" y="52">Done</name>
		</location>
		<location id="id18" x="467" y="-136">
			<name x="457" y="-170">C1</name>
			<committed/>
		</location>
		<location id="id19" x="-569" y="-136">
			<name x="-579" y="-170">C3</name>
			<committed/>
		</location>
		<location id="id20" x="161" y="68">
			<name x="151" y="34">C2</name>
			<committed/>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id20"/>
			<target ref="id15"/>
			<label kind="guard" x="195" y="93">!slot_busy(slot_id)</label>
			<nail x="187" y="93"/>
			<nail x="450" y="93"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="187" y="42">tick?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id16"/>
			<label kind="guard" x="-136" y="25">slot_busy(slot_id)</label>
			<label kind="assignment" x="-136" y="42">x = 0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-535" y="-42">out_sensors_state[out_sensor_id] || !next_slot_is_free()</label>
			<nail x="-543" y="-110"/>
			<nail x="-543" y="51"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id14"/>
			<label kind="guard" x="59" y="-119">!slot_busy(first_proc_slot)</label>
			<nail x="425" y="-93"/>
			<nail x="25" y="-93"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="204" y="-161">tick?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="guard" x="-544" y="-178">!out_sensors_state[out_sensor_id] &amp;&amp; next_slot_is_free()</label>
			<label kind="synchronisation" x="-544" y="-195">station_free[station_id]!</label>
			<label kind="assignment" x="-544" y="-161">complete_elaboration()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
			<label kind="guard" x="476" y="-59">slot_busy(first_proc_slot)</label>
			<label kind="synchronisation" x="476" y="-42">station_busy[station_id]!</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-620" y="-42">tick?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-509" y="68">x &gt;= elaboration_time</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="0" y="-229">initialize?</label>
			<label kind="assignment" x="0" y="-212">init_station()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">FlowController</name>
		<parameter>const int policy</parameter>
		<location id="id21" x="-1964" y="-2091">
			<name x="-1946" y="-2099">Not_Taken_1</name>
		</location>
		<location id="id22" x="-1751" y="-1887">
			<name x="-1734" y="-1913">Taken_2</name>
		</location>
		<location id="id23" x="-1955" y="-2261">
			<name x="-2057" y="-2295">Not_Taken_0</name>
		</location>
		<location id="id24" x="-1785" y="-2337">
			<urgent/>
		</location>
		<location id="id25" x="-1615" y="-2261">
			<name x="-1598" y="-2278">Taken_0</name>
		</location>
		<location id="id26" x="-1785" y="-2184">
			<urgent/>
		</location>
		<location id="id27" x="-1972" y="-1691">
			<name x="-2073" y="-1724">Not_Taken_3</name>
		</location>
		<location id="id28" x="-1801" y="-1767">
			<urgent/>
		</location>
		<location id="id29" x="-1649" y="-1682">
			<name x="-1659" y="-1716">Taken_3</name>
		</location>
		<location id="id30" x="-1801" y="-1605">
			<urgent/>
		</location>
		<location id="id31" x="-1963" y="-1887">
			<committed/>
		</location>
		<location id="id32" x="-2550" y="-1989">
			<name x="-2560" y="-2023">Start</name>
		</location>
		<location id="id33" x="-2397" y="-1989">
			<committed/>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-2057" y="-2363">!out_sensors_state[2]</label>
			<nail x="-1955" y="-2337"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-1742" y="-2184">!slot_busy(POS_STATIONS[3]) || !out_sensors_state[3]</label>
			<nail x="-1615" y="-2184"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="guard" x="-1776" y="-1605">!slot_busy(BRANCH_FIRST_POS)</label>
			<nail x="-1648" y="-1605"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-2158" y="-1792">!slot_busy(CONTROLLER_POS+1)</label>
			<nail x="-1971" y="-1767"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id23"/>
			<label kind="guard" x="-2244" y="-2286">policy == 0</label>
			<nail x="-2252" y="-2261"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id27"/>
			<label kind="guard" x="-2243" y="-1716">policy == 3</label>
			<nail x="-2252" y="-1690"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id31"/>
			<label kind="guard" x="-2243" y="-1912">policy == 2</label>
			<nail x="-2251" y="-1887"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id21"/>
			<label kind="guard" x="-2244" y="-2116">policy == 1</label>
			<nail x="-2252" y="-2091"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="guard" x="-2533" y="-1955">policy != 0 &amp;&amp;
policy != 1 &amp;&amp;
policy != 2 &amp;&amp;
policy != 3 &amp;&amp;
policy != 4</label>
			<nail x="-2431" y="-1955"/>
			<nail x="-2525" y="-1955"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-2525" y="-1989">initialize?</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-1938" y="-1912">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-1759" y="-1665">tick?</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id27"/>
			<label kind="guard" x="-2108" y="-1640">slot_busy(BRANCH_FIRST_POS)</label>
			<label kind="synchronisation" x="-1972" y="-1623">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="guard" x="-1733" y="-1767">slot_busy(CONTROLLER_POS+1)</label>
			<label kind="synchronisation" x="-1733" y="-1750">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-1886" y="-1733">tick?</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="guard" x="-2201" y="-2210">slot_busy(POS_STATIONS[3]) &amp;&amp; out_sensors_state[3]</label>
			<label kind="synchronisation" x="-1989" y="-2227">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1742" y="-2244">tick?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="-1717" y="-2346">out_sensors_state[2]</label>
			<label kind="synchronisation" x="-1717" y="-2329">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-1878" y="-2295">tick?</label>
		</transition>
	</template>
	<system>/**
 * System definition
 */

const SlotId POS_IN_SENSORS_IN_ORDER[STATIONS] = {POS_IN_SENSORS[0], POS_IN_SENSORS[1], POS_IN_SENSORS[3], POS_IN_SENSORS[2], POS_IN_SENSORS[4], POS_IN_SENSORS[5]};
const OutSensorId OUT_SENSORS_ID_IN_ORDER[STATIONS] = {1, 2, 4, 3, 4, 0};
const StationId IN_SENSORS_STATION[IN_SENSORS] = {0, 1, 3, 2, 4, 5};

initializer = Initializer();
conveyorBelt = ConveyorBelt();
station(const StationId id) = Station(id, POS_STATIONS[id], STATIONS_ELABORATION_TIME[id], POS_IN_SENSORS_IN_ORDER[id], OUT_SENSORS_ID_IN_ORDER[id]);
inSensor(const InSensorId id) = InSensor(id, IN_SENSORS_STATION[id]);
outSensor(const OutSensorId id) = OutSensor(id, POS_OUT_SENSORS[id]);
flowController = FlowController(POLICY);

system initializer, conveyorBelt, station, inSensor, outSensor, flowController;
</system>
	<queries>
		<query>
			<formula></formula>
			<comment>------ Mandatory properties ------</comment>
		</query>
		<query>
			<formula>A[] forall(disk1 : DiskId) forall(disk2 : DiskId) (initializer.run_state imply ((disk1 == disk2) || (status[disk1] != status[disk2])))</formula>
			<comment>P1. It never happens that a station holds more than 1 piece.
P2. it never happens that two pieces occupy the same belt slot.</comment>
		</query>
		<query>
			<formula>A[] (forall(id : OutSensorId) outSensor(id).Locked imply check_queue(id, POS_OUT_SENSORS[id]))</formula>
			<comment>P3. No queue ever exceeds the maximum allowed length.</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>P4. the plant never incurs in deadlock.</comment>
		</query>
		<query>
			<formula></formula>
			<comment>------ Simulations ------</comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	station(0).Pre_processing + station(0).C2 + station(0).Processing * 2 + (station(0).Done + station(0).C3) * 3 + 4*5,
	station(1).Pre_processing + station(1).C2 + station(1).Processing * 2 + (station(1).Done + station(1).C3) * 3 + 4*4,
	station(2).Pre_processing + station(2).C2 + station(2).Processing * 2 + (station(2).Done + station(2).C3) * 3 + 4*3,
	station(3).Pre_processing + station(3).C2 + station(3).Processing * 2 + (station(3).Done + station(3).C3) * 3 + 4*2,
	station(4).Pre_processing + station(4).C2 + station(4).Processing * 2 + (station(4).Done + station(4).C3) * 3 + 4,
	station(5).Pre_processing + station(5).C2 + station(5).Processing * 2 + (station(5).Done + station(5).C3) * 3
}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	outSensor(0).Locked + outSensor(0).C2 + 4*4,
	outSensor(1).Locked + outSensor(1).C2 + 4*3,
	outSensor(2).Locked + outSensor(2).C2 + 4*2,
	outSensor(3).Locked + outSensor(3).C2 + 4,
	outSensor(4).Locked + outSensor(4).C2
}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	inSensor(0).Locked + 4*5,
	inSensor(1).Locked + 4*4,
	inSensor(2).Locked + 4*3,
	inSensor(3).Locked + 4*2,
	inSensor(4).Locked + 4,
	inSensor(5).Locked
}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] { status[0] }</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
