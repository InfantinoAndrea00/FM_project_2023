<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/**
 * Constants
 */

const int SLOTS = 110;
const int STATIONS = 6;
const int IN_SENSORS = 6; 
const int OUT_SENSORS = 5;
      
typedef int[0, SLOTS - 1] SlotId;
typedef int[0, STATIONS - 1] StationId;
typedef int[0, IN_SENSORS - 1] InSensorId;
typedef int[0, OUT_SENSORS - 1] OutSensorId;

const SlotId CONTROLLER_POS = 64;
const SlotId BRANCH_FIRST_POS = 86;
const SlotId MERGE_POS = 103;
const SlotId POS_IN_SENSORS[IN_SENSORS] = {13, 34, 64, 77, 93, 107};
const SlotId POS_STATIONS[STATIONS] = {17, 38, 81, 88, 97, 109};

const InSensorId IN_SENSOR_OF_OUT_SENSOR[OUT_SENSORS] = {0, 1, 3, 4, 5};

/**
 * Channels
 */

broadcast chan tick, initialize, station_free[STATIONS], station_busy[STATIONS];
broadcast chan switch_branch;

/**
 * Variables
 */

bool slot_busy[SLOTS];                 // true = busy; false = free;
bool in_sensors_state[IN_SENSORS];     // true = locked; false = unlocked;
bool out_sensors_state[OUT_SENSORS];   // true = queue is full; false = can send piece;




/**
 * Verification
 */

bool check_queue(const OutSensorId id, const SlotId position) {
    int i;
    for (i = position - 1; i &lt;= POS_IN_SENSORS[IN_SENSOR_OF_OUT_SENSOR[id]]; i++)
        if (!slot_busy[i])
            return true;
    return false;
}</declaration>
	<template>
		<name>OutSensor</name>
		<parameter>const OutSensorId id, const SlotId position</parameter>
		<declaration>
</declaration>
		<location id="id0" x="-34" y="-60">
			<name x="-25" y="-85">Unlocked</name>
		</location>
		<location id="id1" x="-34" y="136">
			<name x="-17" y="136">Locked</name>
		</location>
		<location id="id2" x="-34" y="-170">
			<name x="-44" y="-204">Start</name>
		</location>
		<location id="id3" x="59" y="34">
			<name x="68" y="0">C1</name>
			<urgent/>
		</location>
		<location id="id4" x="-136" y="34">
			<name x="-146" y="0">C2</name>
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition id="id5">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-280" y="-42">!slot_busy[position]</label>
			<label kind="assignment" x="-340" y="-25">out_sensors_state[id] = false</label>
		</transition>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-289" y="68">slot_busy[position]</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-85" y="68">tick?</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="25" y="76">slot_busy[position]</label>
			<label kind="assignment" x="25" y="93">out_sensors_state[id] = true</label>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="-25">!slot_busy[position]</label>
			<nail x="59" y="-59"/>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-34" y="-17">tick?</label>
		</transition>
		<transition id="id11">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-25" y="-144">initialize?</label>
			<label kind="assignment" x="-25" y="-127">out_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>bool take_branch;

/**    Get the id of the In-Sensor at position "pos"    **/
InSensorId get_sensor_id(SlotId pos) {
    for(i : InSensorId)
        if(POS_IN_SENSORS[i] == pos)
            return i;
    return 0;
}

/**    Get the slot type at position "slot" (0 = normal slot; 1 = station; 2 = In-Sensor)    **/
int[0, 2] get_slot_type(const SlotId slot) {
    for(i : StationId)
        if(slot == POS_STATIONS[i])
            return 1;
    
    for(i : InSensorId)
        if(slot == POS_IN_SENSORS[i])
            return 2;

    return 0;
}

/**    Move the disk from position "prev_slot" to position "curr_slot", if possible    **/
void try_move(SlotId old_pos, SlotId new_pos) {
    if(slot_busy[old_pos] &amp;&amp; !slot_busy[new_pos]) {
        slot_busy[old_pos] = false;
        slot_busy[new_pos] = true;
    } 
}

/**    Handle the two slots where the two alternative branches begin (positions 65 and 86)    **/
void manage_branch() {
    if(!in_sensors_state[2]) {
        if(take_branch)
            try_move(CONTROLLER_POS, BRANCH_FIRST_POS);
        else
            try_move(CONTROLLER_POS, CONTROLLER_POS+1);
    }
}

/**    Move the entire Conveyor Belt, slot by slot (by decreasing id) and, where possible, shift the disks    **/
void update(){
    int[0, SLOTS] i = SLOTS;
    while(i &gt; 0) {
        i--;
        if(slot_busy[i] &amp;&amp; get_slot_type(i) != 1) {
            if(i == CONTROLLER_POS){
                manage_branch();
            }
            else {
                if(i == BRANCH_FIRST_POS-1){
                    try_move(i, MERGE_POS);
                }
                else {
                    if(get_slot_type(i) == 2) {
                        if(!in_sensors_state[get_sensor_id(i)])
                            try_move(i, i+1);
                    } 
                    else { 
                        try_move(i, i+1);
                    }
                }           
            }
        }
    }
}</declaration>
		<location id="id12" x="-3102" y="-2814">
		</location>
		<location id="id13" x="-3102" y="-2949">
		</location>
		<location id="id14" x="-2898" y="-2813">
		</location>
		<init ref="id13"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-2847" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-2847" y="-2813">take_branch = !take_branch</label>
			<nail x="-2856" y="-2839"/>
			<nail x="-2856" y="-2788"/>
		</transition>
		<transition id="id16">
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-3060" y="-2805">tick?</label>
			<label kind="assignment" x="-3060" y="-2779">update()</label>
			<nail x="-2932" y="-2779"/>
			<nail x="-3068" y="-2779"/>
		</transition>
		<transition id="id17">
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-3085" y="-2839">tick?</label>
		</transition>
		<transition id="id18">
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-3264" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-3366" y="-2813">take_branch = !take_branch</label>
			<nail x="-3145" y="-2788"/>
			<nail x="-3145" y="-2847"/>
		</transition>
		<transition id="id19">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-3094" y="-2924">initialize?</label>
			<label kind="assignment" x="-3094" y="-2907">take_branch = false</label>
		</transition>
	</template>
	<template>
		<name>InSensor</name>
		<parameter>const InSensorId id, const StationId station_controlled</parameter>
		<location id="id20" x="-34" y="-365">
		</location>
		<location id="id21" x="-34" y="-255">
			<name x="-17" y="-272">Unlocked</name>
		</location>
		<location id="id22" x="-34" y="-59">
			<name x="-8" y="-59">Locked</name>
		</location>
		<init ref="id20"/>
		<transition id="id23">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-442" y="-178">station_free[station_controlled]?</label>
			<label kind="assignment" x="-399" y="-161">in_sensors_state[id] = false</label>
			<nail x="-153" y="-102"/>
			<nail x="-153" y="-212"/>
		</transition>
		<transition id="id24">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="85" y="-178">station_busy[station_controlled]?</label>
			<label kind="assignment" x="85" y="-161">in_sensors_state[id] = true</label>
			<nail x="76" y="-212"/>
			<nail x="76" y="-93"/>
		</transition>
		<transition id="id25">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-25" y="-331">initialize?</label>
			<label kind="assignment" x="-25" y="-314">in_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<parameter>const int speed, const int[1, 12] n_disks</parameter>
		<declaration>clock x;

/**    Set the entire System on the initial configuration    **/
void init_system() {
    SlotId i = POS_IN_SENSORS[0];
    for(d : int[0, n_disks-1]) {
        slot_busy[i-d] = true;
    }
}
</declaration>
		<location id="id26" x="-178" y="-170">
			<committed/>
		</location>
		<location id="id27" x="-178" y="-34">
			<name x="-280" y="-51">run_state</name>
			<label kind="invariant" x="-161" y="-42">x &lt;= speed</label>
		</location>
		<init ref="id26"/>
		<transition id="id28">
			<source ref="id27"/>
			<target ref="id27"/>
			<label kind="guard" x="-212" y="25">x &gt;= speed</label>
			<label kind="synchronisation" x="-195" y="42">tick!</label>
			<label kind="assignment" x="-195" y="59">x = 0</label>
			<nail x="-144" y="25"/>
			<nail x="-204" y="25"/>
		</transition>
		<transition id="id29">
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-170" y="-136">initialize!</label>
			<label kind="assignment" x="-170" y="-119">x = 0,
init_system()</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const StationId station_id, const SlotId slot_id, const int elaboration_time, const SlotId in_sensor_slot, const OutSensorId out_sensor_id</parameter>
		<declaration>clock x;
SlotId first_proc_slot;

/**    Set the Station on the initial configuration    **/
void init_station() {
    if(in_sensor_slot == CONTROLLER_POS)
        first_proc_slot = BRANCH_FIRST_POS;
    else
        first_proc_slot = in_sensor_slot + 1;
}

/**    Produce a disk and place it on the next slot    **/
void complete_elaboration() {
    slot_busy[slot_id] = false;
    if (slot_id == SLOTS-1)
        slot_busy[0] = true;
    else
        slot_busy[slot_id + 1] = true;
}

/**    Check whether the next slot is free to receive a disk or not    **/
bool next_slot_is_free() {
    if (slot_id == SLOTS-1) {
        if (!slot_busy[0])
            return true;
    }
    else {
        if (!slot_busy[slot_id+1])
            return true;
    }
    return false;
}</declaration>
		<location id="id30" x="-289" y="-416">
			<name x="-299" y="-450">Start</name>
		</location>
		<location id="id31" x="-289" y="-297">
			<name x="-281" y="-322">Idle</name>
		</location>
		<location id="id32" x="501" y="-297">
			<name x="518" y="-305">Pre_processing</name>
		</location>
		<location id="id33" x="-442" y="-94">
			<name x="-476" y="-85">Processing</name>
			<label kind="invariant" x="-527" y="-68">x &lt;= elaboration_time</label>
		</location>
		<location id="id34" x="-850" y="-93">
			<name x="-901" y="-109">Done</name>
		</location>
		<location id="id35" x="136" y="-297">
			<name x="126" y="-331">C1</name>
			<committed/>
		</location>
		<location id="id36" x="-850" y="-297">
			<name x="-860" y="-331">C3</name>
			<committed/>
		</location>
		<location id="id37" x="136" y="-93">
			<name x="127" y="-76">C2</name>
			<committed/>
		</location>
		<init ref="id30"/>
		<transition id="id38">
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="guard" x="17" y="-195">slot_busy[slot_id]</label>
		</transition>
		<transition id="id39">
			<source ref="id37"/>
			<target ref="id32"/>
			<label kind="guard" x="280" y="-85">!slot_busy[slot_id]</label>
			<nail x="501" y="-93"/>
		</transition>
		<transition id="id40">
			<source ref="id32"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="263" y="-204">tick?</label>
		</transition>
		<transition id="id41">
			<source ref="id37"/>
			<target ref="id33"/>
			<label kind="guard" x="-238" y="-93">slot_busy[slot_id]</label>
			<label kind="assignment" x="-238" y="-76">x = 0</label>
		</transition>
		<transition id="id42">
			<source ref="id36"/>
			<target ref="id34"/>
			<label kind="guard" x="-816" y="-203">out_sensors_state[out_sensor_id] || !next_slot_is_free()</label>
			<nail x="-824" y="-271"/>
			<nail x="-824" y="-110"/>
		</transition>
		<transition id="id43">
			<source ref="id35"/>
			<target ref="id31"/>
			<label kind="guard" x="-238" y="-255">!slot_busy[first_proc_slot] &amp;&amp; !slot_busy[slot_id]</label>
			<label kind="synchronisation" x="-238" y="-238">station_free[station_id]!</label>
			<nail x="94" y="-254"/>
			<nail x="-256" y="-254"/>
		</transition>
		<transition id="id44">
			<source ref="id31"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-77" y="-322">tick?</label>
		</transition>
		<transition id="id45">
			<source ref="id36"/>
			<target ref="id31"/>
			<label kind="guard" x="-825" y="-339">!out_sensors_state[out_sensor_id] &amp;&amp; next_slot_is_free()</label>
			<label kind="synchronisation" x="-825" y="-356">station_free[station_id]!</label>
			<label kind="assignment" x="-825" y="-322">complete_elaboration()</label>
		</transition>
		<transition id="id46">
			<source ref="id35"/>
			<target ref="id32"/>
			<label kind="guard" x="170" y="-323">slot_busy[first_proc_slot] &amp;&amp; !slot_busy[slot_id]</label>
			<label kind="synchronisation" x="170" y="-340">station_busy[station_id]!</label>
		</transition>
		<transition id="id47">
			<source ref="id34"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-901" y="-203">tick?</label>
		</transition>
		<transition id="id48">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="-790" y="-93">x &gt;= elaboration_time</label>
		</transition>
		<transition id="id49">
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-281" y="-390">initialize?</label>
			<label kind="assignment" x="-281" y="-373">init_station()</label>
		</transition>
	</template>
	<template>
		<name>FlowController_0</name>
		<location id="id50" x="-2244" y="-2116">
			<name x="-2346" y="-2150">Not_Taken_0</name>
		</location>
		<location id="id51" x="-2074" y="-2192">
			<urgent/>
		</location>
		<location id="id52" x="-1904" y="-2116">
			<name x="-1887" y="-2133">Taken_0</name>
		</location>
		<location id="id53" x="-2074" y="-2039">
			<urgent/>
		</location>
		<location id="id54" x="-2567" y="-2116">
			<name x="-2609" y="-2150">Start</name>
		</location>
		<init ref="id54"/>
		<transition id="id55">
			<source ref="id51"/>
			<target ref="id50"/>
			<label kind="guard" x="-2346" y="-2218">!out_sensors_state[2]</label>
			<nail x="-2244" y="-2192"/>
		</transition>
		<transition id="id56">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-2048" y="-2031">!slot_busy[POS_STATIONS[3]] || !out_sensors_state[3]</label>
			<nail x="-1904" y="-2039"/>
		</transition>
		<transition id="id57">
			<source ref="id54"/>
			<target ref="id50"/>
			<label kind="synchronisation" x="-2465" y="-2107">initialize?</label>
		</transition>
		<transition id="id58">
			<source ref="id53"/>
			<target ref="id50"/>
			<label kind="guard" x="-2601" y="-2065">slot_busy[POS_STATIONS[3]] &amp;&amp; out_sensors_state[3]</label>
			<label kind="synchronisation" x="-2295" y="-2082">switch_branch!</label>
		</transition>
		<transition id="id59">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-2031" y="-2099">tick?</label>
		</transition>
		<transition id="id60">
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="guard" x="-2006" y="-2201">out_sensors_state[2]</label>
			<label kind="synchronisation" x="-2006" y="-2184">switch_branch!</label>
		</transition>
		<transition id="id61">
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-2167" y="-2150">tick?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">FlowController_1</name>
		<location id="id62" x="-3553" y="-3595">
			<name x="-3536" y="-3620">Not_Taken_1</name>
		</location>
		<location id="id63" x="-3757" y="-3595">
			<name x="-3808" y="-3629">Start</name>
		</location>
		<init ref="id63"/>
		<transition id="id64">
			<source ref="id63"/>
			<target ref="id62"/>
			<label kind="synchronisation" x="-3714" y="-3586">initialize?</label>
		</transition>
	</template>
	<template>
		<name>FlowController_2</name>
		<location id="id65" x="-2074" y="-2210">
			<name x="-2057" y="-2236">Taken_2</name>
		</location>
		<location id="id66" x="-2260" y="-2210">
			<committed/>
		</location>
		<location id="id67" x="-2422" y="-2210">
			<name x="-2432" y="-2244">Start</name>
		</location>
		<init ref="id67"/>
		<transition id="id68">
			<source ref="id67"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-2388" y="-2201">initialize?</label>
		</transition>
		<transition id="id69">
			<source ref="id66"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-2235" y="-2235">switch_branch!</label>
		</transition>
	</template>
	<template>
		<name>FlowController_3</name>
		<location id="id70" x="-2252" y="-1989">
			<name x="-2353" y="-2022">Not_Taken_3</name>
		</location>
		<location id="id71" x="-2081" y="-2065">
			<urgent/>
		</location>
		<location id="id72" x="-1929" y="-1980">
			<name x="-1921" y="-2014">Taken_3</name>
		</location>
		<location id="id73" x="-2081" y="-1903">
			<urgent/>
		</location>
		<location id="id74" x="-2550" y="-1989">
			<name x="-2601" y="-2023">Start</name>
		</location>
		<init ref="id74"/>
		<transition id="id75">
			<source ref="id73"/>
			<target ref="id72"/>
			<label kind="guard" x="-2056" y="-1903">!slot_busy[BRANCH_FIRST_POS]</label>
			<nail x="-1928" y="-1903"/>
		</transition>
		<transition id="id76">
			<source ref="id71"/>
			<target ref="id70"/>
			<label kind="guard" x="-2438" y="-2090">!slot_busy[CONTROLLER_POS+1]</label>
			<nail x="-2251" y="-2065"/>
		</transition>
		<transition id="id77">
			<source ref="id74"/>
			<target ref="id70"/>
			<label kind="synchronisation" x="-2456" y="-1980">initialize?</label>
		</transition>
		<transition id="id78">
			<source ref="id72"/>
			<target ref="id73"/>
			<label kind="synchronisation" x="-2039" y="-1963">tick?</label>
		</transition>
		<transition id="id79">
			<source ref="id73"/>
			<target ref="id70"/>
			<label kind="guard" x="-2396" y="-1947">slot_busy[BRANCH_FIRST_POS]</label>
			<label kind="synchronisation" x="-2243" y="-1930">switch_branch!</label>
		</transition>
		<transition id="id80">
			<source ref="id71"/>
			<target ref="id72"/>
			<label kind="guard" x="-2013" y="-2065">slot_busy[CONTROLLER_POS+1]</label>
			<label kind="synchronisation" x="-2013" y="-2048">switch_branch!</label>
		</transition>
		<transition id="id81">
			<source ref="id70"/>
			<target ref="id71"/>
			<label kind="synchronisation" x="-2166" y="-2031">tick?</label>
		</transition>
	</template>
	<system>                                                  /**********************************************************************************/
                                                  /***   CONFIGURATION: Change here the Configuration Parameters of the plant:    ***/
                                                  /**********************************************************************************/
                                                  /***     Speed of the Conveyor Belt (Slots per Unit of Time):                   ***/       
const int SPEED =                                 /***/     1                                                                   ;/***/
                                                  /***     Number of Disks:                                                       ***/
const int[1, 12] DISKS =                          /***/     2                                                                   ;/***/
                                                  /***/                                                                          /***/
                                                  /***     Positions of the 5 Out-Sensors:                                        ***/
const SlotId POS_OUT_SENSORS[OUT_SENSORS] = {     /***/     2    /** ID: 0 (1st) */                                             ,/***/
                                                  /***/     24   /** ID: 1 (2nd) */                                             ,/***/
                                                  /***/     68   /** ID: 2 (3rd) */                                             ,/***/
                                                  /***/     90   /** ID: 3 (4th) */                                             ,/***/
                                                  /***/     105  /** ID: 4 (5th) */                                            };/***/
                                                  /***/                                                                          /***/
                                                  /***     Elaboration Times of the 6 Stations:                                   ***/            
const int STATIONS_ELABORATION_TIME[STATIONS] = { /***/     3    /** ID: 0 (1st)*/                                              ,/***/
                                                  /***/     3    /** ID: 1 (2nd)*/                                              ,/***/
                                                  /***/     3    /** ID: 2 (3rd)*/                                              ,/***/
                                                  /***/     3    /** ID: 3 (4th)*/                                              ,/***/
                                                  /***/     3    /** ID: 4 (5th)*/                                              ,/***/
                                                  /***/     3    /** ID: 5 (6nd)*/                                             };/***/
                                                  /**********************************************************************************/

/**
 * System definition
 */

const SlotId POS_IN_SENSORS_IN_ORDER[STATIONS] = {POS_IN_SENSORS[0], POS_IN_SENSORS[1], POS_IN_SENSORS[3], POS_IN_SENSORS[2], POS_IN_SENSORS[4], POS_IN_SENSORS[5]};
const OutSensorId OUT_SENSORS_ID_IN_ORDER[STATIONS] = {1, 2, 4, 3, 4, 0};
const StationId IN_SENSORS_STATION[IN_SENSORS] = {0, 1, 3, 2, 4, 5};

initializer = Initializer(SPEED, DISKS);
conveyorBelt = ConveyorBelt();
station(const StationId id) = Station(id, POS_STATIONS[id], STATIONS_ELABORATION_TIME[id], POS_IN_SENSORS_IN_ORDER[id], OUT_SENSORS_ID_IN_ORDER[id]);
inSensor(const InSensorId id) = InSensor(id, IN_SENSORS_STATION[id]);
outSensor(const OutSensorId id) = OutSensor(id, POS_OUT_SENSORS[id]);
flowController = FlowController_0();

system initializer, conveyorBelt, station, inSensor, outSensor, flowController;
</system>
	<queries>
		<query>
			<formula/>
			<comment>------ Mandatory properties ------</comment>
		</query>
		<query>
			<formula>A[] (initializer.run_state imply ((sum(i : SlotId) slot_busy[i]) == DISKS))</formula>
			<comment>No spawn or disappear of disk

Verifies properties:
P1. it never happens that a station holds more than 1 piece;
P2. it never happens that two pieces occupy the same belt slot.</comment>
		</query>
		<query>
			<formula>A[] forall(id : StationId) (station(id).Processing imply (!slot_busy[POS_STATIONS[id] - 1] &amp;&amp; slot_busy[POS_STATIONS[id]]))</formula>
			<comment>If a station is processing, no other piece is waiting to enter immediately before

Verifies property:
P1. It never happens that a station holds more than 1 piece.</comment>
		</query>
		<query>
			<formula>A[] (forall(id : OutSensorId) outSensor(id).Locked imply check_queue(id, POS_OUT_SENSORS[id]))</formula>
			<comment>If the sensor is locked, at least one position between it's input sensor and the location right before it is free

Verifies property:
P3. No queue ever exceeds the maximum allowed length.</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Verifies property:
P4. the plant never incurs in deadlock.</comment>
		</query>
		<query>
			<formula/>
			<comment>------ Simulations ------</comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	station(0).Pre_processing + station(0).C2 + station(0).Processing * 2 + (station(0).Done + station(0).C3) * 3 + 4*5,
	station(1).Pre_processing + station(1).C2 + station(1).Processing * 2 + (station(1).Done + station(1).C3) * 3 + 4*4,
	station(2).Pre_processing + station(2).C2 + station(2).Processing * 2 + (station(2).Done + station(2).C3) * 3 + 4*3,
	station(3).Pre_processing + station(3).C2 + station(3).Processing * 2 + (station(3).Done + station(3).C3) * 3 + 4*2,
	station(4).Pre_processing + station(4).C2 + station(4).Processing * 2 + (station(4).Done + station(4).C3) * 3 + 4,
	station(5).Pre_processing + station(5).C2 + station(5).Processing * 2 + (station(5).Done + station(5).C3) * 3
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	outSensor(0).Locked + outSensor(0).C2 + 4*4,
	outSensor(1).Locked + outSensor(1).C2 + 4*3,
	outSensor(2).Locked + outSensor(2).C2 + 4*2,
	outSensor(3).Locked + outSensor(3).C2 + 4,
	outSensor(4).Locked + outSensor(4).C2
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	inSensor(0).Locked + 4*5,
	inSensor(1).Locked + 4*4,
	inSensor(2).Locked + 4*3,
	inSensor(3).Locked + 4*2,
	inSensor(4).Locked + 4,
	inSensor(5).Locked
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=200] { slot_busy[17], station(0).Idle + 2 }</formula>
			<comment/>
		</query>
	</queries>
</nta>
