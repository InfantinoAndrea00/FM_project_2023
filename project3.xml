<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**
 * Constants
 */

const int N_SLOTS = 110;
const int N_STATIONS = 6;
const int N_IN_SENSORS = 6;
const int N_OUT_SENSORS = 5;
const int[0, N_SLOTS-1] CONTROLLER_POS = 64;
const int[0, N_SLOTS-1] BRANCH_FIRST_POS = 86;
const int[0, N_SLOTS-1] MERGE_POS = 103;

const int POS_IN_SENSORS[N_IN_SENSORS] = {13, 34, 64, 77, 93, 107};
const int POS_STATIONS[6] = {17, 38, 81, 88, 97, 109};

/**
 * Verification
 */
typedef int[0, N_SLOTS - 1] slots;
typedef int[0, N_STATIONS - 1] stations;

/**
 * Channels
 */

broadcast chan tick, initialize, station_free[N_STATIONS], station_busy[N_STATIONS];
chan switch_branch;

/**
 * Variables
 */

typedef int[0, 3] element; // 0 = only slot; 1 = station; 2 = in sensor; 3 = out sensor

element system_structure[N_SLOTS];
int[0, N_SLOTS-1] station_slots[N_STATIONS];

bool system_state[N_SLOTS];    // true if the piece is in that position
bool in_sensors_state[N_IN_SENSORS]; // true = locked; false = unlocked;
bool out_sensors_state[N_OUT_SENSORS]; // true = queue is full; false = can send piece;

/**
 * Functions
 */

/**    set the entire System on the initial configuration    **/
void init_system(const int[0, N_SLOTS-1] head_pos, const int[0, N_SLOTS-1] tail_pos, const int n_disks) {
    for(i : int[0, N_SLOTS - 1])
        system_structure[i] = 0;

    for(i : int[0, N_SLOTS - 1])
        if(i &gt;= tail_pos and i &lt;= head_pos and i &gt;= (head_pos - n_disks + 1))
            system_state[i] = true;
        else
            system_state[i] = false;

}</declaration>
	<template>
		<name>OutSensor</name>
		<parameter>const int[0, N_OUT_SENSORS-1] id, const int[0, N_SLOTS-1] position</parameter>
		<declaration>/**    set the Out-Sensor on the initial configuration    **/
void init_out_sensor() {
    out_sensors_state[id] = false;
    system_structure[position] = 3;
}
</declaration>
		<location id="id0" x="-34" y="-60">
			<name x="-25" y="-85">Unlocked</name>
		</location>
		<location id="id1" x="-34" y="136">
			<name x="-17" y="136">Locked</name>
		</location>
		<location id="id2" x="-34" y="-170">
		</location>
		<location id="id3" x="59" y="34">
			<urgent/>
		</location>
		<location id="id4" x="-136" y="34">
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-357" y="-42">system_state[position] == false</label>
			<label kind="assignment" x="-340" y="-25">out_sensors_state[id] = false</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-399" y="85">system_state[position] == true</label>
			<nail x="-136" y="136"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-85" y="68">tick?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="25" y="76">system_state[position] == true</label>
			<label kind="assignment" x="25" y="93">out_sensors_state[id] = true</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="-25">system_state[position] == false</label>
			<nail x="59" y="-59"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-34" y="-17">tick?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-25" y="-144">initialize?</label>
			<label kind="assignment" x="-25" y="-127">init_out_sensor()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<parameter>const int speed</parameter>
		<declaration>clock x;
bool take_branch;

/**    handle the slot where the two branches merge together (position 103)    **/
void manage_merge() {
    bool first = false, second = false;
    if(system_state[MERGE_POS-1] == true)
        first = true;
    if(system_state[BRANCH_FIRST_POS-1] == true)
        second = true;

//  If both are empty, keep staying empty:
    if(first == false &amp;&amp; second == false)
        system_state[MERGE_POS] = false;

//  If only the ending slot of the alternative branch has a disk, take the disk from it:
    if(first == true &amp;&amp; second == false){
        system_state[MERGE_POS] = true;
        system_state[MERGE_POS-1] = false;
    }
     
//  If only the ending slot of the main branch has a disk, take the disk from it:
    if(first == false &amp;&amp; second == true){
        system_state[MERGE_POS] = true;
        system_state[BRANCH_FIRST_POS-1] = false;
    }

//  If both slots have a disk, take the disk based on the following Policy:
//      If the Flow Controller is currently sending disks on the main branch, take the disk
//      from its ending slot, otherwise take the disk from alternative branch's ending slot;
    if(first == true &amp;&amp; second == true){
        system_state[MERGE_POS] = true;
        if(take_branch == true)
            system_state[MERGE_POS-1] = false;
        else
            system_state[BRANCH_FIRST_POS-1] = false;
    }   
}

/**    handle the two slots where the two alternative branches begin (positions 65 and 86)    **/
void manage_branch(int[0, N_SLOTS-1] i) {

//  If the Flow Controller is sending disks on the alternative branch, move the disk (if present) on its first slot:
    if(take_branch == true) {
       if(i == BRANCH_FIRST_POS) {
            if(system_state[CONTROLLER_POS] == true) {
                if(in_sensors_state[2] == false) {
                    system_state[i] = true;
                    system_state[CONTROLLER_POS] = false;
                }
            }
            else
                if(in_sensors_state[2] == false)
                    system_state[i] = false;
       }
    }

//  If the Flow Controller is sending disks on the main branch, move the disk (if present) on its first slot:
    else {
        if(i == CONTROLLER_POS+1) {
            if(system_state[CONTROLLER_POS] == true) {
                if(in_sensors_state[2] == false) {
                    system_state[i] = true;
                    system_state[CONTROLLER_POS] = false;
                }
            }
            else
                if(in_sensors_state[2] == false)
                    system_state[i] = false;
        }
    }  
}

/**    move the enitre Conveyor Belt, slot by slot (by decreasing id) and, where possible, shift the Disks    **/
void update(){
    int[0, N_SLOTS-1] i = N_SLOTS-1;
    int[0, N_IN_SENSORS-1] curr_in_sensor = N_IN_SENSORS-1;
    bool to_block = false;
    while(i &gt; 0) {

//      if on the (i-1)-th is placed a station, skip the iteration (since i-th slot is handled by the Station):
        if(system_structure[i-1] != 1) {

//          if i-th slot is the slot where the two branches merge together, handle it:
            if(i == MERGE_POS){
                manage_merge();
            }
            else {

//              if on i-th slot is placed a station, handle it: 
                if(system_structure[i] == 1){
                    if(system_state[i] == true) {
                        if(system_state[i-1] == true)
                            to_block = true;
                    }
                    else
                        if(system_state[i-1] == true) {
                            system_state[i] = true;
                            system_state[i-1] = false;
                        }
                }
                else {

//                  if on (i-1)-th slot is placed an In-Sensor, handle it: 
                    if(system_structure[i-1] == 2) {
                        if(in_sensors_state[curr_in_sensor] == true)
                            to_block = true;
                        if(curr_in_sensor &gt; 0)
                            curr_in_sensor--;
                    }

//                  if i-th slot is one of the two slots where the two alternative branches begin, handle it:
                    if(i == BRANCH_FIRST_POS || i == CONTROLLER_POS+1){
                        manage_branch(i);
                    }

//                  if i-th slot is a normal slot, handle it, i.e. take a disk if (i-1)th slot has it: 
                    else { 
                        if(system_state[i-1] == true){
                            if(to_block == false) {
                                system_state[i] = true;
                                system_state[i-1] = false;
                            }
                        }
                        else {
                            if (to_block == false)
                                system_state[i] = false;
                            else
                                to_block = false;
                        }
                    }
                }             
            }
        }
        i--;
    }
}</declaration>
		<location id="id5" x="-2541" y="-2593">
			<label kind="invariant" x="-2524" y="-2618">x &lt;= speed</label>
		</location>
		<location id="id6" x="-2541" y="-2728">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-2465" y="-2558">x &gt;= speed</label>
			<label kind="assignment" x="-2465" y="-2541">update(),
x = 0</label>
			<nail x="-2456" y="-2575"/>
			<nail x="-2499" y="-2516"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-2737" y="-2558">switch_branch?</label>
			<label kind="assignment" x="-2839" y="-2541">take_branch = !take_branch</label>
			<nail x="-2592" y="-2516"/>
			<nail x="-2626" y="-2575"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-2533" y="-2703">initialize?</label>
			<label kind="assignment" x="-2533" y="-2686">take_branch = false,
x = 0</label>
		</transition>
	</template>
	<template>
		<name>InSensor</name>
		<parameter>const int[0, N_IN_SENSORS-1] id, const int [0, N_STATIONS-1] station_controlled</parameter>
		<location id="id7" x="-34" y="-365">
		</location>
		<location id="id8" x="-34" y="-255">
			<name x="-17" y="-272">Unlocked</name>
		</location>
		<location id="id9" x="-34" y="-59">
			<name x="-8" y="-59">Locked</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-442" y="-178">station_free[station_controlled]?</label>
			<label kind="assignment" x="-399" y="-161">in_sensors_state[id] = false</label>
			<nail x="-153" y="-102"/>
			<nail x="-153" y="-212"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="85" y="-178">station_busy[station_controlled]?</label>
			<label kind="assignment" x="85" y="-161">in_sensors_state[id] = true</label>
			<nail x="76" y="-212"/>
			<nail x="76" y="-93"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-25" y="-331">initialize?</label>
			<label kind="assignment" x="-25" y="-314">in_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<parameter>const int frequency, const int[0, N_SLOTS-1] headPos, const int[0, N_SLOTS-1] tailPos, const int nDisks</parameter>
		<declaration>clock x;
</declaration>
		<location id="id10" x="-178" y="-170">
		</location>
		<location id="id11" x="-178" y="-34">
			<name x="-280" y="-51">run_state</name>
			<label kind="invariant" x="-161" y="-42">x &lt;= frequency</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-221" y="25">x &gt;= frequency</label>
			<label kind="synchronisation" x="-187" y="42">tick!</label>
			<label kind="assignment" x="-187" y="59">x = 0</label>
			<nail x="-144" y="25"/>
			<nail x="-204" y="25"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-170" y="-136">initialize!</label>
			<label kind="assignment" x="-170" y="-119">x = 0,
init_system(headPos, tailPos, nDisks)</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const int[0, N_STATIONS-1] station_id, const int[0, N_SLOTS-1] slot_id, const int elaboration_time, const int[0, N_SLOTS-1] in_sensor_slot, const int[0, N_OUT_SENSORS-1] out_sensor_id</parameter>
		<declaration>clock x;
int[0, N_SLOTS-1] first_proc_slot;

/**    set the Station on the initial configuration    **/
void init_station() {
    station_slots[station_id] = slot_id;
    system_structure[slot_id] = 1;
    system_structure[in_sensor_slot] = 2;

    if(in_sensor_slot == CONTROLLER_POS)
        first_proc_slot = BRANCH_FIRST_POS;
    else
        first_proc_slot = in_sensor_slot + 1;
}

/**    produce a disk and place it on the next slot    **/
void complete_elaboration() {
    system_state[slot_id] = false;
    if (slot_id == N_SLOTS-1)
        system_state[0] = true;
    else
        system_state[slot_id+1] = true;
}

/**    check whether the next slot is free to receive a disk or not    **/
bool next_slot_is_free() {
    if (slot_id == N_SLOTS-1) {
        if (system_state[0] == false)
            return true;
    }
    else {
        if (system_state[slot_id+1] == false)
            return true;
    }
    return false;
}</declaration>
		<location id="id12" x="-8" y="-255">
		</location>
		<location id="id13" x="-8" y="-136">
			<name x="0" y="-161">Idle</name>
		</location>
		<location id="id14" x="467" y="68">
			<name x="484" y="60">Pre_processing</name>
		</location>
		<location id="id15" x="-161" y="67">
			<name x="-195" y="76">Processing</name>
			<label kind="invariant" x="-255" y="93">x &lt;= elaboration_time</label>
		</location>
		<location id="id16" x="-569" y="68">
			<name x="-620" y="52">Done</name>
		</location>
		<location id="id17" x="467" y="-136">
			<committed/>
		</location>
		<location id="id18" x="-569" y="-136">
			<committed/>
		</location>
		<location id="id19" x="161" y="68">
			<committed/>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="guard" x="195" y="93">system_state[slot_id] == false</label>
			<nail x="187" y="93"/>
			<nail x="450" y="93"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="187" y="42">tick?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="guard" x="-136" y="25">system_state[slot_id] == true</label>
			<label kind="assignment" x="-136" y="42">x = 0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-535" y="-42">out_sensors_state[out_sensor_id] == true || next_slot_is_free() == false</label>
			<nail x="-543" y="-110"/>
			<nail x="-543" y="51"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id13"/>
			<label kind="guard" x="59" y="-119">system_state[first_proc_slot] == false</label>
			<nail x="425" y="-93"/>
			<nail x="25" y="-93"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="204" y="-161">tick?</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id13"/>
			<label kind="guard" x="-544" y="-178">out_sensors_state[out_sensor_id] == false &amp;&amp; next_slot_is_free() == true</label>
			<label kind="synchronisation" x="-543" y="-195">station_free[station_id]!</label>
			<label kind="assignment" x="-543" y="-161">complete_elaboration()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="guard" x="476" y="-59">system_state[first_proc_slot] == true</label>
			<label kind="synchronisation" x="476" y="-42">station_busy[station_id]!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-620" y="-42">tick?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-509" y="68">x &gt;= elaboration_time</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="0" y="-229">initialize?</label>
			<label kind="assignment" x="0" y="-212">init_station()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">FlowController</name>
		<parameter>const int policy, const int T</parameter>
		<declaration>clock x;</declaration>
		<location id="id20" x="-1964" y="-2091">
			<name x="-1946" y="-2099">Not_Taken_1</name>
		</location>
		<location id="id21" x="-1752" y="-1989">
			<name x="-1735" y="-2015">Taken_2</name>
		</location>
		<location id="id22" x="-1964" y="-1862">
			<name x="-2040" y="-1912">Not_Taken_3</name>
			<label kind="invariant" x="-2023" y="-1895">x &lt;= 2*T</label>
		</location>
		<location id="id23" x="-1751" y="-1862">
			<name x="-1752" y="-1912">Taken_3</name>
			<label kind="invariant" x="-1752" y="-1895">x &lt;= 2*T</label>
		</location>
		<location id="id24" x="-1955" y="-2261">
			<name x="-2057" y="-2295">Not_Taken_0</name>
		</location>
		<location id="id25" x="-1785" y="-2337">
			<urgent/>
		</location>
		<location id="id26" x="-1615" y="-2261">
			<name x="-1598" y="-2278">Taken_0</name>
		</location>
		<location id="id27" x="-1785" y="-2184">
			<urgent/>
		</location>
		<location id="id28" x="-1964" y="-1607">
			<name x="-2065" y="-1640">Not_Taken_4</name>
		</location>
		<location id="id29" x="-1793" y="-1683">
			<urgent/>
		</location>
		<location id="id30" x="-1641" y="-1598">
			<name x="-1651" y="-1632">Taken_4</name>
		</location>
		<location id="id31" x="-1793" y="-1521">
			<urgent/>
		</location>
		<location id="id32" x="-1964" y="-1989">
			<committed/>
		</location>
		<location id="id33" x="-2550" y="-1989">
			<name x="-2560" y="-2023">Start</name>
		</location>
		<location id="id34" x="-2397" y="-1989">
			<committed/>
		</location>
		<init ref="id33"/>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-2057" y="-2363">out_sensors_state[2] == false</label>
			<nail x="-1955" y="-2337"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="guard" x="-1759" y="-2176">system_state[station_slots[3]] == false ||
out_sensors_state[3] == false</label>
			<nail x="-1615" y="-2184"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="-1768" y="-1521">system_state[BRANCH_FIRST_POS] == false</label>
			<nail x="-1640" y="-1521"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="-2150" y="-1708">system_state[CONTROLLER_POS+1] == false</label>
			<nail x="-1963" y="-1683"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id24"/>
			<label kind="guard" x="-2244" y="-2286">policy == 0</label>
			<nail x="-2252" y="-2261"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id28"/>
			<label kind="guard" x="-2235" y="-1632">policy == 4</label>
			<nail x="-2244" y="-1606"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id22"/>
			<label kind="guard" x="-2244" y="-1887">policy == 3</label>
			<nail x="-2252" y="-1861"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id32"/>
			<label kind="guard" x="-2244" y="-2014">policy == 2</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id20"/>
			<label kind="guard" x="-2244" y="-2116">policy == 1</label>
			<nail x="-2252" y="-2091"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-2533" y="-1955">policy != 0 &amp;&amp;
policy != 1 &amp;&amp;
policy != 2 &amp;&amp;
policy != 3 &amp;&amp;
policy != 4</label>
			<nail x="-2431" y="-1955"/>
			<nail x="-2525" y="-1955"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-2525" y="-1989">initialize?</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1939" y="-2014">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-1751" y="-1581">tick?</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id28"/>
			<label kind="guard" x="-2218" y="-1572">system_state[BRANCH_FIRST_POS] == true</label>
			<label kind="synchronisation" x="-2014" y="-1555">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-1725" y="-1683">system_state[CONTROLLER_POS+1] == true</label>
			<label kind="synchronisation" x="-1725" y="-1666">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-1878" y="-1649">tick?</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="guard" x="-2193" y="-2235">x &gt;= 1 &amp;&amp; 
system_state[station_slots[3]] == true &amp;&amp;
out_sensors_state[3] == true</label>
			<label kind="synchronisation" x="-2193" y="-2176">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-1742" y="-2244">tick?</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-1717" y="-2371">x &gt;= 1 &amp;&amp;
out_sensors_state[2] == true</label>
			<label kind="synchronisation" x="-1717" y="-2329">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-1878" y="-2295">tick?</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-1912" y="-1955">x &gt;= T</label>
			<label kind="synchronisation" x="-1912" y="-1972">switch_branch!</label>
			<label kind="assignment" x="-1913" y="-1939">x = 0</label>
			<nail x="-1921" y="-1913"/>
			<nail x="-1785" y="-1913"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-1912" y="-1785">x &gt;= T</label>
			<label kind="synchronisation" x="-1912" y="-1768">switch_branch!</label>
			<label kind="assignment" x="-1913" y="-1802">x = 0</label>
			<nail x="-1785" y="-1803"/>
			<nail x="-1929" y="-1803"/>
		</transition>
	</template>
	<system>/**
 * Configuration
 */

const int SPEED = 3;
const int TICK_FREQUENCY = 1;    // TICK_FREQUENCY SHOULD BE &lt; SPEED
const int N_DISKS = 2;
const int[0, 4] POLICY = 0;
const int RAND_FLOW_CONTROLLER = 1;    // Useful only if POLICY = 3

const int POS_OUT_SENSORS[N_OUT_SENSORS] = {2, 24, 68, 90, 105};
const int STATIONS_ELABORATION_TIME[N_STATIONS] = {6, 7, 8, 9, 8, 7};

/**
 * System definition
 */

const int POS_IN_SENSORS_IN_ORDER[N_STATIONS] = {POS_IN_SENSORS[0], POS_IN_SENSORS[1], POS_IN_SENSORS[3], POS_IN_SENSORS[2], POS_IN_SENSORS[4], POS_IN_SENSORS[5]};
const int OUT_SENSORS_ID_IN_ORDER[N_STATIONS] = {1, 2, 4, 3, 4, 0};
const int IN_SENSORS_STATION[N_IN_SENSORS] = {0, 1, 3, 2, 4, 5};

initializer = Initializer(TICK_FREQUENCY, POS_IN_SENSORS[0], POS_OUT_SENSORS[0], N_DISKS);
conveyorBelt = ConveyorBelt(SPEED);
station(const int[0, N_STATIONS - 1] id) = Station(id, POS_STATIONS[id], STATIONS_ELABORATION_TIME[id], POS_IN_SENSORS_IN_ORDER[id], OUT_SENSORS_ID_IN_ORDER[id]);
inSensor(const int[0, N_IN_SENSORS - 1] id) = InSensor(id, IN_SENSORS_STATION[id]);
outSensor(const int[0,N_OUT_SENSORS - 1] id) = OutSensor(id, POS_OUT_SENSORS[id]);
flowController = FlowController(POLICY, RAND_FLOW_CONTROLLER);

system initializer, conveyorBelt, station, inSensor, outSensor, flowController;
</system>
	<queries>
		<query>
			<formula></formula>
			<comment>------ Mandatory properties ------</comment>
		</query>
		<query>
			<formula>A[] (initializer.run_state imply ((sum(i:slots) system_state[i] == true) == N_DISKS))</formula>
			<comment>No spawn or disappear of disk

Verifies properties:
P1. it never happens that a station holds more than 1 piece;
P2. it never happens that two pieces occupy the same belt slot.</comment>
		</query>
		<query>
			<formula>A[] forall(id:int[0,N_STATIONS - 1]) (station(id).Processing imply (system_state[POS_STATIONS[id] - 1] == false &amp;&amp; system_state[POS_STATIONS[id]] == true))</formula>
			<comment>If a station is processing, no other piece is waiting to enter immediately before

Verifies property:
P1. It never happens that a station holds more than 1 piece.</comment>
		</query>
		<query>
			<formula>A[] (forall(id:int[0,N_OUT_SENSORS - 1]) outSensor(id).Locked imply (system_state[POS_OUT_SENSORS[id]-1] == false))</formula>
			<comment>The slot immediatly before an out sensor is always free when the out sensor is locked

Verifies property:
P3. No queue ever exceeds the maximum allowed length.</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Verifies property:
P4. the plant never incurs in deadlock.</comment>
		</query>
	</queries>
</nta>
