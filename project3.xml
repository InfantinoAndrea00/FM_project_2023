<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/**
 * Constants
 */

const int N_SLOTS = 110;
const int N_STATIONS = 6;
const int N_IN_SENSORS = 5;
const int N_OUT_SENSORS = 5;
const int[0, N_SLOTS-1] CONTROLLER_POS = 65;
const int[0, N_SLOTS-1] BRANCH_FIRST_POS = 86;
const int[0, N_SLOTS-1] MERGE_POS = 103;

/**
 * Channels
 */

broadcast chan initialize;
chan move, station_free[N_STATIONS], station_busy[N_STATIONS], switch_branch; // To be general in conveyor belt

/**
 * Variables
 */

typedef int[0, 4] element; // 0 = only slot; 1 = station; 2 = in sensor; 3 = out sensor; 4 = flow controller 

element system_structure[N_SLOTS];
int[0, N_SLOTS-1] station_slots[N_STATIONS];

bool system_state[N_SLOTS];    // true if the piece is in that position
bool in_sensors_state[N_IN_SENSORS]; // true = locked; false = unlocked;
bool out_sensors_state[N_OUT_SENSORS]; // true = queue is full; false = can send piece;

/**
 * Functions
 */

void init_system() {
    for(i : int[0, N_SLOTS - 1])
        system_structure[i] = 0;

    for(i : int[0, N_SLOTS - 1])
        if(i &gt;= 2 &amp;&amp; i &lt;= 13)    // Initial positions of disks
            system_state[i] = true;
        else
            system_state[i] = false;

}</declaration>
	<template>
		<name>OutSensor</name>
		<parameter>int[0, N_OUT_SENSORS-1] id, int[0, N_SLOTS-1] queueHead, int[0, N_SLOTS-1] queueTail</parameter>
		<declaration>void init_out_sensor() {
    out_sensors_state[id] = false;
}

bool full_queue() {
    int i = queueTail;
    while (i &lt;= queueHead){
        if(system_state[i] == false)
             return false;
        i++;
    }
    return true;
}</declaration>
		<location id="id0" x="-34" y="-60">
			<name x="-17" y="-77">Unlocked</name>
		</location>
		<location id="id1" x="-42" y="136">
			<name x="-16" y="136">Locked</name>
		</location>
		<location id="id2" x="-34" y="-170">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-280" y="25">full_queue() == false</label>
			<label kind="assignment" x="-331" y="42">out_sensors_state[id] = false</label>
			<nail x="-144" y="93"/>
			<nail x="-144" y="-25"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="85" y="25">full_queue() == true</label>
			<label kind="assignment" x="85" y="42">out_sensors_state[id] = true</label>
			<nail x="68" y="-25"/>
			<nail x="68" y="93"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-25" y="-144">initialize?</label>
			<label kind="assignment" x="-25" y="-127">init_out_sensor()</label>
		</transition>
	</template>
	<template>
		<name>InSensor</name>
		<parameter>int[0, N_IN_SENSORS-1] id, int [0, N_STATIONS-1] station_controlled</parameter>
		<location id="id3" x="-34" y="-365">
		</location>
		<location id="id4" x="-34" y="-255">
			<name x="-17" y="-272">Unlocked</name>
		</location>
		<location id="id5" x="-34" y="-59">
			<name x="-8" y="-59">Locked</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="-178">station_free[station_controlled]?</label>
			<label kind="assignment" x="-339" y="-161">in_sensors_state[id] = false</label>
			<nail x="-153" y="-102"/>
			<nail x="-153" y="-212"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="85" y="-178">station_busy[station_controlled]?</label>
			<label kind="assignment" x="85" y="-161">in_sensors_state[id] = true</label>
			<nail x="76" y="-212"/>
			<nail x="76" y="-93"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-25" y="-331">initialize?</label>
			<label kind="assignment" x="-25" y="-314">in_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>bool take_branch;

void manage_merge() {
    bool first = false, second = false;
    if(system_state[MERGE_POS-1] == true)
        first = true;
    if(system_state[BRANCH_FIRST_POS-1] == true)
        second = true;

    if(first == false &amp;&amp; second == false)
        system_state[MERGE_POS] = false;

    if(first == true &amp;&amp; second == false){
        system_state[MERGE_POS] = true;
        system_state[MERGE_POS-1] = false;
    }
     
    if(first == false &amp;&amp; second == true){
        system_state[MERGE_POS] = true;
        system_state[BRANCH_FIRST_POS-1] = false;
    }

    if(first == true &amp;&amp; second == true){        //POLICY: if branch taken, take from branch
        system_state[MERGE_POS] = true;
        if(take_branch == true)
            system_state[MERGE_POS-1] = false;
        else
            system_state[BRANCH_FIRST_POS-1] = false;
    }   
}

void manage_branch(int[0, N_SLOTS-1] i) {
    if(take_branch == true) {
       if(i == BRANCH_FIRST_POS) {
            if(system_state[CONTROLLER_POS] == true) {
                system_state[i] = true;
                system_state[CONTROLLER_POS] = false;
            }
            else
                system_state[i] = false;
        }
    }
    else {
        if(i == CONTROLLER_POS+1) {
            if(system_state[CONTROLLER_POS] == true) {
                system_state[i] = true;
                system_state[CONTROLLER_POS] = false;
            }
            else
                system_state[i] = false;
        }
    }
}

void manage_station(int[0, N_SLOTS-1] i) {
    if(system_state[i-1] == true) {
        system_state[i] = true;
        system_state[i-1] = false;
    }
}

void update(){
    int[0, N_SLOTS-1] i = N_SLOTS-1;
    int[0, N_IN_SENSORS-1] curr_in_sensor = N_IN_SENSORS-1;
    bool to_block = false; 
    while(i &gt; 0) {
        if(i == MERGE_POS){
            manage_merge();
        }
        else if(i == BRANCH_FIRST_POS || i == CONTROLLER_POS+1){
            manage_branch(i);
        }
        else if(system_structure[i] == 1){
            manage_station(i);
        }
        else if(system_structure[i-1] != 1) {
            if(system_structure[i-1] == 2) {
                if(in_sensors_state[curr_in_sensor] == true)
                    to_block = true;
                curr_in_sensor--;
            }

            if(system_state[i-1] == true){
                if(to_block == false)
                    system_state[i] = true;
                    system_state[i-1] = false;
            }
            else {
                if (to_block == false)
                    system_state[i] = false;
                else
                    to_block = false;
            }
        }
        i--;
    }
}</declaration>
		<location id="id6" x="-2329" y="-2482">
		</location>
		<location id="id7" x="-2329" y="-2592">
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-2227" y="-2473">move?</label>
			<label kind="assignment" x="-2227" y="-2456">update()</label>
			<nail x="-2235" y="-2414"/>
			<nail x="-2235" y="-2482"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-2524" y="-2473">switch_branch?</label>
			<label kind="assignment" x="-2601" y="-2456">take_branch = !take_branch</label>
			<nail x="-2422" y="-2414"/>
			<nail x="-2422" y="-2482"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-2312" y="-2575">initialize?</label>
			<label kind="assignment" x="-2312" y="-2558">take_branch = false</label>
		</transition>
	</template>
	<template>
		<name>Motor</name>
		<parameter>const double speed</parameter>
		<declaration>clock x;
</declaration>
		<location id="id8" x="-178" y="-170">
		</location>
		<location id="id9" x="-178" y="-34">
			<label kind="invariant" x="-161" y="-43">x &lt;= speed</label>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-212" y="25">x &gt;= speed</label>
			<label kind="synchronisation" x="-212" y="42">move!</label>
			<label kind="assignment" x="-212" y="59">x = 0</label>
			<nail x="-127" y="25"/>
			<nail x="-229" y="25"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-170" y="-119">initialize!</label>
			<label kind="assignment" x="-170" y="-102">x = 0, init_system()</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const int[0, N_STATIONS-1] station_id, const int[0, N_SLOTS-1] slot_id, const int elaboration_time, const int[0, N_SLOTS-1] in_sensor_slot, const int[0, N_OUT_SENSORS-1] out_sensor_id</parameter>
		<declaration>clock x;

void init_station() {
    station_slots[station_id] = slot_id;
    system_structure[slot_id] = 1;
    system_structure[in_sensor_slot] = 2;

}

void complete_elaboration() {
    system_state[slot_id] = false;
    if (slot_id == N_SLOTS-1)
        system_state[0] = true;
    else
        system_state[slot_id+1] = true;
    x = 0;
}</declaration>
		<location id="id10" x="-8" y="-229">
		</location>
		<location id="id11" x="-8" y="-136">
			<name x="0" y="-161">Idle</name>
		</location>
		<location id="id12" x="382" y="144">
			<name x="399" y="127">Pre_processing</name>
		</location>
		<location id="id13" x="-8" y="144">
			<name x="9" y="119">Processing</name>
			<label kind="invariant" x="-84" y="161">x &lt;= elaboration_time</label>
		</location>
		<location id="id14" x="382" y="-136">
			<committed/>
		</location>
		<location id="id15" x="-187" y="-25">
			<name x="-238" y="-34">Done</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id15"/>
			<target ref="id11"/>
			<label kind="guard" x="-102" y="-76">out_sensors_state[out_sensor_id] == false</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="390" y="-34">station_busy[station_id]!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="-246" y="42">x &gt;= elaboration_time</label>
			<label kind="synchronisation" x="-246" y="59">station_free[station_id]!</label>
			<label kind="assignment" x="-246" y="76">complete_elaboration()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="127" y="144">system_state[slot_id] == true</label>
			<label kind="assignment" x="127" y="161">x = 0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="68" y="-161">system_state[in_sensor_slot+1] == true</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="0" y="-212">initialize?</label>
			<label kind="assignment" x="0" y="-195">init_station()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">FlowController</name>
		<parameter>const int policy, const int T</parameter>
		<declaration>clock x;</declaration>
		<location id="id16" x="-1964" y="-2091">
			<name x="-1946" y="-2099">Not_Taken_1</name>
		</location>
		<location id="id17" x="-1752" y="-1989">
			<name x="-1735" y="-2015">Taken_2</name>
		</location>
		<location id="id18" x="-2542" y="-2040">
			<name x="-2601" y="-2074">Start</name>
		</location>
		<location id="id19" x="-1964" y="-1862">
			<name x="-2040" y="-1912">Not_Taken_3</name>
			<label kind="invariant" x="-2023" y="-1895">x &lt;= 2*T</label>
		</location>
		<location id="id20" x="-1751" y="-1862">
			<name x="-1752" y="-1912">Taken_3</name>
			<label kind="invariant" x="-1752" y="-1895">x &lt;= 2*T</label>
		</location>
		<location id="id21" x="-1955" y="-2261">
			<name x="-2015" y="-2295">Open_0</name>
			<label kind="invariant" x="-1965" y="-2244">x &lt;= 1</label>
		</location>
		<location id="id22" x="-1785" y="-2337">
			<committed/>
		</location>
		<location id="id23" x="-1615" y="-2261">
			<name x="-1598" y="-2287">Closed_0</name>
			<label kind="invariant" x="-1625" y="-2244">x &lt;= 1</label>
		</location>
		<location id="id24" x="-1785" y="-2184">
			<committed/>
		</location>
		<location id="id25" x="-1964" y="-1607">
			<name x="-2032" y="-1641">Not_Taken_4</name>
		</location>
		<location id="id26" x="-1794" y="-1683">
			<committed/>
		</location>
		<location id="id27" x="-1641" y="-1598">
			<name x="-1651" y="-1632">Taken_4</name>
		</location>
		<location id="id28" x="-1794" y="-1522">
			<committed/>
		</location>
		<location id="id29" x="-1964" y="-1989">
			<committed/>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id29"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-1939" y="-2014">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id25"/>
			<label kind="guard" x="-2347" y="-1649">policy == 4</label>
			<label kind="synchronisation" x="-2347" y="-1632">initialize?</label>
			<nail x="-2355" y="-1607"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="-1708" y="-1564">system_state[BRANCH_FIRST_POS] == true</label>
			<label kind="synchronisation" x="-1707" y="-1547">move?</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-1972" y="-1564">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-1725" y="-1666">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-2168" y="-1683">system_state[CONTROLLER_POS+1] == true</label>
			<label kind="synchronisation" x="-1921" y="-1666">move?</label>
			<label kind="comments" x="-1963" y="-1496">TODO: Check the position in the system_state</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id21"/>
			<label kind="guard" x="-2355" y="-2303">policy == 0</label>
			<label kind="synchronisation" x="-2355" y="-2286">initialize?</label>
			<nail x="-2363" y="-2261"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1956" y="-2210">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-1717" y="-2201">x &gt;= 1 &amp;&amp; system_state[station_slots[4]] == true</label>
			<label kind="assignment" x="-1717" y="-2218">x = 0</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-1718" y="-2329">switch_branch!</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-2125" y="-2346">x &gt;= 1 &amp;&amp; system_state[station_slots[3]] == true</label>
			<label kind="assignment" x="-1878" y="-2329">x = 0</label>
			<label kind="comments" x="-1853" y="-2269">POLICY 0: TO ADJUST</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id29"/>
			<label kind="guard" x="-2355" y="-2032">policy == 2</label>
			<label kind="synchronisation" x="-2355" y="-2014">initialize?</label>
			<nail x="-2363" y="-1989"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-2355" y="-1904">policy == 3</label>
			<label kind="synchronisation" x="-2355" y="-1887">initialize?</label>
			<nail x="-2363" y="-1862"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-2355" y="-2133">policy == 1</label>
			<label kind="synchronisation" x="-2355" y="-2116">initialize?</label>
			<nail x="-2363" y="-2091"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-1912" y="-1955">x &gt;= T</label>
			<label kind="synchronisation" x="-1912" y="-1972">switch_branch!</label>
			<label kind="assignment" x="-1913" y="-1939">x = 0</label>
			<nail x="-1921" y="-1913"/>
			<nail x="-1785" y="-1913"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-1912" y="-1785">x &gt;= T</label>
			<label kind="synchronisation" x="-1912" y="-1768">switch_branch!</label>
			<label kind="assignment" x="-1913" y="-1802">x = 0</label>
			<nail x="-1785" y="-1803"/>
			<nail x="-1929" y="-1803"/>
		</transition>
	</template>
	<system>/**
 * Configuration
 */

const double SPEED = 1.0;

/**
 * System definition
 */

motor = Motor(SPEED);

system motor;
</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
