<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/**
 * Constants
 */
const int N_DISKS_TMP = 12;
const int N_SLOTS = 110;
const int N_STATIONS = 6;
const int N_IN_SENSORS = 6;
const int N_OUT_SENSORS = 5;
const int[0, N_SLOTS-1] CONTROLLER_POS = 65;
const int[0, N_SLOTS-1] BRANCH_FIRST_POS = 86;
const int[0, N_SLOTS-1] MERGE_POS = 103;

const int POS_IN_SENSORS[N_IN_SENSORS] = {13, 34, 64, 77, 93, 107};
const int IN_SENSOR_OF_OUT_SENSOR[N_OUT_SENSORS] = {0, 1, 3, 4, 5};
const int POS_STATIONS[6] = {17, 38, 81, 88, 97, 109};

/**
 * Verification
 */

typedef int[0, N_SLOTS - 1] slots;
typedef int[0, N_STATIONS - 1] stations;

/**
 * Channels
 */

broadcast chan tick, initialize, station_free[N_STATIONS], station_busy[N_STATIONS];
broadcast chan switch_branch;

/**
 * Variables
 */

typedef int[0, 3] element; // 0 = only slot; 1 = station; 2 = in sensor; 3 = out sensor

element system_structure[N_SLOTS];
int[0, N_SLOTS-1] station_slots[N_STATIONS];

int system_state[N_DISKS_TMP];    
bool in_sensors_state[N_IN_SENSORS]; // true = locked; false = unlocked;
bool out_sensors_state[N_OUT_SENSORS]; // true = queue is full; false = can send piece;

/**
 * Functions
 */

/**    set the entire System on the initial configuration    **/
void init_system(const int[0, N_SLOTS-1] head_pos) {
    for(i : int[0, N_DISKS_TMP - 1])
        system_state[i] = head_pos - i;
}

bool system_state_occupation(const int[0, N_SLOTS - 1] position) {
    for (i : int[0, N_DISKS_TMP - 1])
        if (position == system_state[i])
            return true;
    return false;
}

/**    checks that the queue never exceeds its maximum limit    **/
bool check_queue(const int[0, N_OUT_SENSORS - 1] id, const int[0, N_SLOTS - 1] position) {
    int i;
    for (i = position - 1; i &lt;= POS_IN_SENSORS[IN_SENSOR_OF_OUT_SENSOR[id]]; i ++)
        if (!system_state_occupation(i))
            return true;
    return false;
}

void system_state_update(const int[0, N_SLOTS - 1] position, const bool taken) {
    for (i : int[0, N_DISKS_TMP - 1])
        if (position == system_state[i])
            if (i != BRANCH_FIRST_POS - 1 and !taken)
                system_state[i] = (system_state[i] + 1) % (N_SLOTS - 1);
            else if (i == BRANCH_FIRST_POS - 1)
                system_state[i] = MERGE_POS;
            else if (taken and i == CONTROLLER_POS - 1)
                system_state[i] = BRANCH_FIRST_POS;
}</declaration>
	<template>
		<name>OutSensor</name>
		<parameter>const int[0, N_OUT_SENSORS-1] id, const int[0, N_SLOTS-1] position, const int probWeight_1, const int probWeight_2</parameter>
		<declaration>/**    set the Out-Sensor on the initial configuration    **/
void init_out_sensor() {
    out_sensors_state[id] = false;
    system_structure[position] = 3;
}
</declaration>
		<location id="id0" x="-4233" y="467">
			<name x="-4224" y="442">Unlocked</name>
			<committed/>
		</location>
		<location id="id1" x="-4233" y="748">
			<name x="-4267" y="773">Locked</name>
			<committed/>
		</location>
		<location id="id2" x="-4233" y="357">
			<name x="-4243" y="323">Start</name>
		</location>
		<location id="id3" x="-4072" y="646">
			<name x="-4082" y="612">C3</name>
			<urgent/>
		</location>
		<location id="id4" x="-4692" y="502">
			<name x="-4709" y="468">C6</name>
			<urgent/>
		</location>
		<location id="id5" x="-4072" y="544">
			<name x="-4082" y="510">C2</name>
		</location>
		<location id="id6" x="-3638" y="561">
			<name x="-3648" y="527">C1</name>
		</location>
		<location id="id7" x="-4692" y="612">
			<name x="-4702" y="578">C5</name>
		</location>
		<location id="id8" x="-4445" y="612">
			<name x="-4455" y="578">C4</name>
		</location>
		<branchpoint id="id9" x="-4590" y="748"/>
		<branchpoint id="id10" x="-3842" y="468"/>
		<init ref="id2"/>
		<transition id="id11" controllable="false">
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-4420" y="637">tick?</label>
			<label kind="assignment" x="-4420" y="620">out_sensors_state[id] = false</label>
			<nail x="-4233" y="612"/>
		</transition>
		<transition id="id12">
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="probability" x="-4522" y="688">probWeight_2</label>
		</transition>
		<transition id="id13">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="probability" x="-4751" y="688">probWeight_1</label>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id1"/>
			<target ref="id9"/>
		</transition>
		<transition id="id15">
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-3970" y="756">tick?</label>
			<label kind="assignment" x="-3970" y="773">out_sensors_state[id] = true</label>
			<nail x="-3638" y="748"/>
		</transition>
		<transition id="id16">
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="probability" x="-3740" y="493">probWeight_2</label>
		</transition>
		<transition id="id17">
			<source ref="id10"/>
			<target ref="id5"/>
			<label kind="probability" x="-4063" y="485">probWeight_1</label>
		</transition>
		<transition id="id18" controllable="false">
			<source ref="id0"/>
			<target ref="id10"/>
		</transition>
		<transition id="id19">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-4658" y="433">system_state_occupation(position) == false</label>
			<label kind="assignment" x="-4658" y="416">out_sensors_state[id] = false</label>
			<nail x="-4692" y="468"/>
		</transition>
		<transition id="id20">
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="guard" x="-5083" y="578">system_state_occupation(position) == true</label>
			<nail x="-4743" y="552"/>
		</transition>
		<transition id="id21">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-4632" y="527">tick?</label>
			<nail x="-4641" y="561"/>
		</transition>
		<transition id="id22">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-4216" y="680">system_state_occupation(position) == true</label>
			<label kind="assignment" x="-4216" y="697">out_sensors_state[id] = true</label>
			<nail x="-4233" y="646"/>
		</transition>
		<transition id="id23">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-4021" y="587">system_state_occupation(position) == false</label>
			<nail x="-4030" y="595"/>
		</transition>
		<transition id="id24">
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-4166" y="586">tick?</label>
			<nail x="-4115" y="595"/>
		</transition>
		<transition id="id25">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-4224" y="383">initialize?</label>
			<label kind="assignment" x="-4224" y="400">init_out_sensor()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>bool take_branch;

/**    handle the slot where the two branches merge together (position 103)    **/
void manage_merge() {
    bool first = false, second = false;
    if(system_state_occupation(MERGE_POS-1) == true)
        first = true;
    if(system_state_occupation(BRANCH_FIRST_POS-1) == true)
        second = true;

//  If only the ending slot of the alternative branch has a disk, take the disk from it:
    if(first == true &amp;&amp; second == false){
        system_state_update(MERGE_POS - 1, take_branch);
    }
     
//  If only the ending slot of the main branch has a disk, take the disk from it:
    if(first == false &amp;&amp; second == true){
        system_state_update(BRANCH_FIRST_POS - 1, take_branch);
    }

//  If both slots have a disk, take the disk based on the following Policy:
//      If the Flow Controller is currently sending disks on the main branch, take the disk
//      from its ending slot, otherwise take the disk from alternative branch's ending slot;
    if(first == true &amp;&amp; second == true){
        if(take_branch == true)
            system_state_update(MERGE_POS-1, take_branch);
        else
            system_state_update(BRANCH_FIRST_POS-1, take_branch);
    }   
}

/**    handle the two slots where the two alternative branches begin (positions 65 and 86)    **/
void manage_branch(int[0, N_SLOTS-1] i) {

//  If the Flow Controller is sending disks on the alternative branch, move the disk (if present) on its first slot:
    if(take_branch == true) {
       if(i == BRANCH_FIRST_POS) {
            if(system_state_occupation(CONTROLLER_POS)) {
                if(in_sensors_state[2] == false) {
                    system_state_update(CONTROLLER_POS, take_branch);
                }
            }
            else
                if(in_sensors_state[2] == false) {
                    // TODO: system_state[i] = false;
                }
       }
    }

//  If the Flow Controller is sending disks on the main branch, move the disk (if present) on its first slot:
    else {
        if(i == CONTROLLER_POS+1) {
            if(system_state_occupation(CONTROLLER_POS)) {
                if(in_sensors_state[2] == false) {
                    system_state_update(CONTROLLER_POS, take_branch);
                }
            }
            else
                if(in_sensors_state[2] == false) {
                    // TODO: system_state[i] = false;
                }
        }
    }  
}

/**    move the enitre Conveyor Belt, slot by slot (by decreasing id) and, where possible, shift the Disks    **/
void update(){
    int[0, N_SLOTS-1] i = N_SLOTS-1;
    int[0, N_IN_SENSORS-1] curr_in_sensor = N_IN_SENSORS-1;
    bool to_block = false;
    while(i &gt; 0) {

//      if on the (i-1)-th is placed a station, skip the iteration (since i-th slot is handled by the Station):
        if(system_structure[i-1] != 1) {

//          if i-th slot is the slot where the two branches merge together, handle it:
            if(i == MERGE_POS){
                manage_merge();
            }
            else {

//              if on i-th slot is placed a station, handle it: 
                if(system_structure[i] == 1){
                    if(system_state_occupation(i)) {
                        if(system_state_occupation(i-1))
                            to_block = true;
                    }
                    else
                        if(system_state_occupation(i-1)) {
                            system_state_update(i-1, take_branch);
                        }
                }
                else {

//                  if on (i-1)-th slot is placed an In-Sensor, handle it: 
                    if(system_structure[i-1] == 2) {
                        if(in_sensors_state[curr_in_sensor] == true)
                            to_block = true;
                        if(curr_in_sensor &gt; 0)
                            curr_in_sensor--;
                    }

//                  if i-th slot is one of the two slots where the two alternative branches begin, handle it:
                    if(i == BRANCH_FIRST_POS || i == CONTROLLER_POS+1){
                        manage_branch(i);
                    }

//                  if i-th slot is a normal slot, handle it, i.e. take a disk if (i-1)th slot has it: 
                    else { 
                        if(system_state_occupation(i-1)){
                            if(to_block == false) {
                                system_state_update(i-1, take_branch);
                            }
                        }
                        else {
                            if (to_block == false) {
                                // TODO: system_state[i] = false;
                            } else
                                to_block = false;
                        }
                    }
                }             
            }
        }
        i--;
    }
}</declaration>
		<location id="id26" x="-3102" y="-2814">
		</location>
		<location id="id27" x="-3102" y="-2949">
		</location>
		<location id="id28" x="-2898" y="-2813">
		</location>
		<location id="id29" x="-2686" y="-2813">
		</location>
		<init ref="id27"/>
		<transition id="id30">
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-2652" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-2652" y="-2813">take_branch = !take_branch</label>
			<nail x="-2660" y="-2839"/>
			<nail x="-2660" y="-2779"/>
		</transition>
		<transition id="id31">
			<source ref="id28"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-2915" y="-2898">switch_branch?</label>
			<label kind="assignment" x="-2915" y="-2881">take_branch = !take_branch</label>
			<nail x="-2924" y="-2856"/>
			<nail x="-2873" y="-2856"/>
		</transition>
		<transition id="id32">
			<source ref="id29"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-3060" y="-2805">tick?</label>
			<label kind="assignment" x="-3060" y="-2779">update()</label>
			<nail x="-2720" y="-2779"/>
			<nail x="-3068" y="-2779"/>
		</transition>
		<transition id="id33">
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-2881" y="-2839">tick?</label>
		</transition>
		<transition id="id34">
			<source ref="id26"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-3085" y="-2839">tick?</label>
		</transition>
		<transition id="id35">
			<source ref="id26"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-3264" y="-2830">switch_branch?</label>
			<label kind="assignment" x="-3366" y="-2813">take_branch = !take_branch</label>
			<nail x="-3145" y="-2796"/>
			<nail x="-3145" y="-2838"/>
		</transition>
		<transition id="id36">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-3094" y="-2924">initialize?</label>
			<label kind="assignment" x="-3094" y="-2907">take_branch = false</label>
		</transition>
	</template>
	<template>
		<name>InSensor</name>
		<parameter>const int[0, N_IN_SENSORS-1] id, const int [0, N_STATIONS-1] station_controlled, const int probWeight_1, const int probWeight_2</parameter>
		<location id="id37" x="161" y="-254">
			<name x="151" y="-288">C2</name>
		</location>
		<location id="id38" x="-60" y="-152">
			<name x="-86" y="-135">Locked</name>
			<committed/>
		</location>
		<location id="id39" x="-187" y="-458">
			<name x="-197" y="-492">Start</name>
		</location>
		<location id="id40" x="-187" y="-348">
			<name x="-272" y="-373">Unlocked</name>
			<committed/>
		</location>
		<location id="id41" x="331" y="-254">
			<name x="321" y="-288">C1</name>
		</location>
		<location id="id42" x="-663" y="-254">
			<name x="-673" y="-288">C4</name>
		</location>
		<location id="id43" x="-476" y="-254">
			<name x="-486" y="-288">C3</name>
		</location>
		<branchpoint id="id44" x="-578" y="-152"/>
		<branchpoint id="id45" x="246" y="-347"/>
		<init ref="id39"/>
		<transition id="id46">
			<source ref="id43"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-451" y="-229">tick?</label>
			<label kind="assignment" x="-451" y="-246">in_sensors_state[id] = false</label>
			<nail x="-187" y="-254"/>
		</transition>
		<transition id="id47">
			<source ref="id44"/>
			<target ref="id42"/>
			<label kind="probability" x="-731" y="-203">probWeight_1</label>
		</transition>
		<transition id="id48">
			<source ref="id44"/>
			<target ref="id43"/>
			<label kind="probability" x="-519" y="-203">probWeight_2</label>
		</transition>
		<transition id="id49">
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-9" y="-246">tick?</label>
			<label kind="assignment" x="-111" y="-279">in_sensors_state[id] = true</label>
			<nail x="-60" y="-254"/>
		</transition>
		<transition id="id50" controllable="false">
			<source ref="id38"/>
			<target ref="id44"/>
		</transition>
		<transition id="id51">
			<source ref="id45"/>
			<target ref="id37"/>
			<label kind="probability" x="93" y="-322">probWeight_2</label>
		</transition>
		<transition id="id52">
			<source ref="id45"/>
			<target ref="id41"/>
			<label kind="probability" x="306" y="-322">probWeight_1</label>
		</transition>
		<transition id="id53" controllable="false">
			<source ref="id40"/>
			<target ref="id45"/>
		</transition>
		<transition id="id54">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-612" y="-390">station_free[station_controlled]?</label>
			<label kind="assignment" x="-570" y="-373">in_sensors_state[id] = false</label>
			<nail x="-663" y="-348"/>
		</transition>
		<transition id="id55">
			<source ref="id41"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="25" y="-144">station_busy[station_controlled]?</label>
			<label kind="assignment" x="25" y="-127">in_sensors_state[id] = true</label>
			<nail x="330" y="-152"/>
		</transition>
		<transition id="id56">
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-178" y="-433">initialize?</label>
			<label kind="assignment" x="-178" y="-416">in_sensors_state[id] = false</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<parameter>const int speed, const int[0, N_SLOTS-1] headPos</parameter>
		<declaration>clock x;
</declaration>
		<location id="id57" x="-178" y="-170">
			<committed/>
		</location>
		<location id="id58" x="-178" y="-34">
			<name x="-280" y="-51">run_state</name>
			<label kind="invariant" x="-161" y="-42">x &lt;= speed</label>
		</location>
		<init ref="id57"/>
		<transition id="id59">
			<source ref="id58"/>
			<target ref="id58"/>
			<label kind="guard" x="-212" y="25">x &gt;= speed</label>
			<label kind="synchronisation" x="-195" y="42">tick!</label>
			<label kind="assignment" x="-195" y="59">x = 0</label>
			<nail x="-144" y="25"/>
			<nail x="-204" y="25"/>
		</transition>
		<transition id="id60">
			<source ref="id57"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="-170" y="-136">initialize!</label>
			<label kind="assignment" x="-170" y="-119">x = 0,
init_system(headPos)</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const int[0, N_STATIONS-1] station_id, const int[0, N_SLOTS-1] slot_id, const int elaboration_time, const int[0, N_SLOTS-1] in_sensor_slot, const int[0, N_OUT_SENSORS-1] out_sensor_id, const double stdDeviation</parameter>
		<declaration>clock x;
int[0, N_SLOTS-1] first_proc_slot;

const double PI = 3.14;
int stochasticProcessingTime;

/**    set the Station on the initial configuration    **/
void init_station() {
    station_slots[station_id] = slot_id;
    system_structure[slot_id] = 1;
    system_structure[in_sensor_slot] = 2;

    if(in_sensor_slot == CONTROLLER_POS)
        first_proc_slot = BRANCH_FIRST_POS;
    else
        first_proc_slot = in_sensor_slot + 1;
}

/**    produce a disk and place it on the next slot    **/
void complete_elaboration() {
    system_state[slot_id] = false;
    if (slot_id == N_SLOTS-1)
        system_state[0] = true;
    else
        system_state[slot_id+1] = true;
}

/**    check whether the next slot is free to receive a disk or not    **/
bool next_slot_is_free() {
    if (slot_id == N_SLOTS-1) {
        if (system_state[0] == false)
            return true;
    }
    else {
        if (system_state[slot_id+1] == false)
            return true;
    }
    return false;
}

/**    value generator according to a Normal distribution    **/
double stdNormal(){
    return sqrt(-2 * ln(1 - random(1))) * cos(2*PI * random (1));
}

double Normal (double mean, double stdDev) {
    return mean + stdDev * stdNormal();
}

int f() {
    double var = Normal (elaboration_time, stdDeviation);
    if (var &lt;= 0) {
        var = 1;
    }
    
    return fint(var);
}</declaration>
		<location id="id61" x="-8" y="-255">
			<name x="-18" y="-289">Start</name>
		</location>
		<location id="id62" x="-8" y="-136">
			<name x="0" y="-161">Idle</name>
		</location>
		<location id="id63" x="467" y="68">
			<name x="484" y="60">Pre_processing</name>
		</location>
		<location id="id64" x="-161" y="67">
			<name x="-195" y="76">Processing</name>
			<label kind="invariant" x="-246" y="93">x &lt;= stochasticProcessingTime</label>
		</location>
		<location id="id65" x="-569" y="68">
			<name x="-620" y="52">Done</name>
		</location>
		<location id="id66" x="467" y="-136">
			<name x="457" y="-170">C1</name>
			<committed/>
		</location>
		<location id="id67" x="-569" y="-136">
			<name x="-579" y="-170">C3</name>
			<committed/>
		</location>
		<location id="id68" x="161" y="68">
			<name x="151" y="34">C2</name>
			<committed/>
		</location>
		<init ref="id61"/>
		<transition id="id69">
			<source ref="id68"/>
			<target ref="id63"/>
			<label kind="guard" x="136" y="93">system_state_occupation(slot_id) == false</label>
			<nail x="187" y="93"/>
			<nail x="450" y="93"/>
		</transition>
		<transition id="id70">
			<source ref="id63"/>
			<target ref="id68"/>
			<label kind="synchronisation" x="187" y="42">tick?</label>
		</transition>
		<transition id="id71">
			<source ref="id68"/>
			<target ref="id64"/>
			<label kind="guard" x="-119" y="8">system_state_occupation(slot_id) == true</label>
			<label kind="assignment" x="-119" y="25">x = 0,
stochasticProcessingTime = f()</label>
		</transition>
		<transition id="id72">
			<source ref="id67"/>
			<target ref="id65"/>
			<label kind="guard" x="-535" y="-51">out_sensors_state[out_sensor_id] == true ||
next_slot_is_free() == false</label>
			<nail x="-543" y="-110"/>
			<nail x="-543" y="51"/>
		</transition>
		<transition id="id73">
			<source ref="id66"/>
			<target ref="id62"/>
			<label kind="guard" x="25" y="-85">system_state_occupation(first_proc_slot) == false</label>
			<nail x="425" y="-93"/>
			<nail x="25" y="-93"/>
		</transition>
		<transition id="id74">
			<source ref="id62"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="204" y="-161">tick?</label>
		</transition>
		<transition id="id75">
			<source ref="id67"/>
			<target ref="id62"/>
			<label kind="guard" x="-544" y="-195">out_sensors_state[out_sensor_id] == false &amp;&amp;
next_slot_is_free() == true</label>
			<label kind="synchronisation" x="-544" y="-212">station_free[station_id]!</label>
			<label kind="assignment" x="-544" y="-161">complete_elaboration()</label>
		</transition>
		<transition id="id76">
			<source ref="id66"/>
			<target ref="id63"/>
			<label kind="guard" x="476" y="-59">system_state_occupation(first_proc_slot) == true</label>
			<label kind="synchronisation" x="476" y="-42">station_busy[station_id]!</label>
		</transition>
		<transition id="id77">
			<source ref="id65"/>
			<target ref="id67"/>
			<label kind="synchronisation" x="-620" y="-42">tick?</label>
		</transition>
		<transition id="id78">
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="guard" x="-509" y="68">x &gt;= stochasticProcessingTime</label>
		</transition>
		<transition id="id79">
			<source ref="id61"/>
			<target ref="id62"/>
			<label kind="synchronisation" x="0" y="-229">initialize?</label>
			<label kind="assignment" x="0" y="-212">init_station()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">FlowController</name>
		<parameter>const int policy</parameter>
		<location id="id80" x="-1964" y="-2091">
			<name x="-1946" y="-2099">Not_Taken_1</name>
		</location>
		<location id="id81" x="-1751" y="-1887">
			<name x="-1734" y="-1913">Taken_2</name>
		</location>
		<location id="id82" x="-1955" y="-2261">
			<name x="-2057" y="-2295">Not_Taken_0</name>
		</location>
		<location id="id83" x="-1785" y="-2337">
			<urgent/>
		</location>
		<location id="id84" x="-1615" y="-2261">
			<name x="-1598" y="-2278">Taken_0</name>
		</location>
		<location id="id85" x="-1785" y="-2184">
			<urgent/>
		</location>
		<location id="id86" x="-1972" y="-1691">
			<name x="-2073" y="-1724">Not_Taken_3</name>
		</location>
		<location id="id87" x="-1801" y="-1767">
			<urgent/>
		</location>
		<location id="id88" x="-1649" y="-1682">
			<name x="-1659" y="-1716">Taken_3</name>
		</location>
		<location id="id89" x="-1801" y="-1605">
			<urgent/>
		</location>
		<location id="id90" x="-1963" y="-1887">
			<committed/>
		</location>
		<location id="id91" x="-2550" y="-1989">
			<name x="-2560" y="-2023">Start</name>
		</location>
		<location id="id92" x="-2397" y="-1989">
			<committed/>
		</location>
		<init ref="id91"/>
		<transition id="id93">
			<source ref="id83"/>
			<target ref="id82"/>
			<label kind="guard" x="-2057" y="-2363">out_sensors_state[2] == false</label>
			<nail x="-1955" y="-2337"/>
		</transition>
		<transition id="id94">
			<source ref="id85"/>
			<target ref="id84"/>
			<label kind="guard" x="-1759" y="-2176">system_state_occupation(station_slots[3]) == false ||
out_sensors_state[3] == false</label>
			<nail x="-1615" y="-2184"/>
		</transition>
		<transition id="id95">
			<source ref="id89"/>
			<target ref="id88"/>
			<label kind="guard" x="-1776" y="-1605">system_state_occupation(BRANCH_FIRST_POS) == false</label>
			<nail x="-1648" y="-1605"/>
		</transition>
		<transition id="id96">
			<source ref="id87"/>
			<target ref="id86"/>
			<label kind="guard" x="-2158" y="-1792">system_state_occupation(CONTROLLER_POS + 1) == false</label>
			<nail x="-1971" y="-1767"/>
		</transition>
		<transition id="id97">
			<source ref="id92"/>
			<target ref="id82"/>
			<label kind="guard" x="-2244" y="-2286">policy == 0</label>
			<nail x="-2252" y="-2261"/>
		</transition>
		<transition id="id98">
			<source ref="id92"/>
			<target ref="id86"/>
			<label kind="guard" x="-2243" y="-1716">policy == 3</label>
			<nail x="-2252" y="-1690"/>
		</transition>
		<transition id="id99">
			<source ref="id92"/>
			<target ref="id90"/>
			<label kind="guard" x="-2243" y="-1912">policy == 2</label>
			<nail x="-2251" y="-1887"/>
		</transition>
		<transition id="id100">
			<source ref="id92"/>
			<target ref="id80"/>
			<label kind="guard" x="-2244" y="-2116">policy == 1</label>
			<nail x="-2252" y="-2091"/>
		</transition>
		<transition id="id101">
			<source ref="id92"/>
			<target ref="id91"/>
			<label kind="guard" x="-2533" y="-1955">policy != 0 &amp;&amp;
policy != 1 &amp;&amp;
policy != 2 &amp;&amp;
policy != 3</label>
			<nail x="-2431" y="-1955"/>
			<nail x="-2525" y="-1955"/>
		</transition>
		<transition id="id102">
			<source ref="id91"/>
			<target ref="id92"/>
			<label kind="synchronisation" x="-2525" y="-1989">initialize?</label>
		</transition>
		<transition id="id103">
			<source ref="id90"/>
			<target ref="id81"/>
			<label kind="synchronisation" x="-1938" y="-1912">switch_branch!</label>
		</transition>
		<transition id="id104">
			<source ref="id88"/>
			<target ref="id89"/>
			<label kind="synchronisation" x="-1759" y="-1665">tick?</label>
		</transition>
		<transition id="id105">
			<source ref="id89"/>
			<target ref="id86"/>
			<label kind="guard" x="-2227" y="-1657">system_state_occupation(BRANCH_FIRST_POS) == true</label>
			<label kind="synchronisation" x="-2022" y="-1639">switch_branch!</label>
		</transition>
		<transition id="id106">
			<source ref="id87"/>
			<target ref="id88"/>
			<label kind="guard" x="-1733" y="-1767">system_state_occupation(CONTROLLER_POS + 1) == true</label>
			<label kind="synchronisation" x="-1733" y="-1750">switch_branch!</label>
		</transition>
		<transition id="id107">
			<source ref="id86"/>
			<target ref="id87"/>
			<label kind="synchronisation" x="-1886" y="-1733">tick?</label>
		</transition>
		<transition id="id108">
			<source ref="id85"/>
			<target ref="id82"/>
			<label kind="guard" x="-2278" y="-2210">system_state_occupation(station_slots[3]) == true &amp;&amp;
out_sensors_state[3] == true</label>
			<label kind="synchronisation" x="-2278" y="-2167">switch_branch!</label>
		</transition>
		<transition id="id109">
			<source ref="id84"/>
			<target ref="id85"/>
			<label kind="synchronisation" x="-1742" y="-2244">tick?</label>
		</transition>
		<transition id="id110">
			<source ref="id83"/>
			<target ref="id84"/>
			<label kind="guard" x="-1717" y="-2346">out_sensors_state[2] == true</label>
			<label kind="synchronisation" x="-1717" y="-2329">switch_branch!</label>
		</transition>
		<transition id="id111">
			<source ref="id82"/>
			<target ref="id83"/>
			<label kind="synchronisation" x="-1878" y="-2295">tick?</label>
		</transition>
	</template>
	<system>/**
 * Configuration
 */

const int SPEED = 1;
// const int N_DISKS = 12;
const int[0, 4] POLICY = 0;

const int POS_OUT_SENSORS[N_OUT_SENSORS] = {2, 24, 68, 90, 105};
const int STATIONS_ELABORATION_TIME[N_STATIONS] = {6, 7, 8, 9, 8, 7};

/**
 * System definition
 */

const int POS_IN_SENSORS_IN_ORDER[N_STATIONS] = {POS_IN_SENSORS[0], POS_IN_SENSORS[1], POS_IN_SENSORS[3], POS_IN_SENSORS[2], POS_IN_SENSORS[4], POS_IN_SENSORS[5]};
const int OUT_SENSORS_ID_IN_ORDER[N_STATIONS] = {1, 2, 4, 3, 4, 0};
const double STD_DEV_STATIONS[N_STATIONS] = {5.0, 5.0, 5.0, 5.0, 5.0, 5.0};
const int IN_SENSORS_STATION[N_IN_SENSORS] = {0, 1, 3, 2, 4, 5};
const int IN_SENSORS_WEIGHT_ERR[N_IN_SENSORS] = {5, 5, 5, 5, 5, 5};
const int IN_SENSORS_WEIGHT_RIGHT[N_IN_SENSORS] = {1, 1, 1, 1, 1, 1};
const int OUT_SENSORS_WEIGHT_ERR[N_IN_SENSORS] = {2, 2, 2, 2, 2, 2};
const int OUT_SENSORS_WEIGHT_RIGHT[N_IN_SENSORS] = {1, 1, 1, 1, 1, 1};

initializer = Initializer(SPEED, POS_IN_SENSORS[0]);
conveyorBelt = ConveyorBelt();
station(const int[0, N_STATIONS - 1] id) = Station(id, POS_STATIONS[id], STATIONS_ELABORATION_TIME[id], POS_IN_SENSORS_IN_ORDER[id], OUT_SENSORS_ID_IN_ORDER[id], STD_DEV_STATIONS[id]);
inSensor(const int[0, N_IN_SENSORS - 1] id) = InSensor(id, IN_SENSORS_STATION[id], IN_SENSORS_WEIGHT_RIGHT[id], IN_SENSORS_WEIGHT_ERR[id]);
outSensor(const int[0,N_OUT_SENSORS - 1] id) = OutSensor(id, POS_OUT_SENSORS[id], OUT_SENSORS_WEIGHT_RIGHT[id], OUT_SENSORS_WEIGHT_ERR[id]);
flowController = FlowController(POLICY);

system initializer, conveyorBelt, station, inSensor, outSensor, flowController;

</system>
	<queries>
		<query>
			<formula/>
			<comment>------ Mandatory properties ------</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100] (&lt;&gt; initializer.run_state imply (forall(i:int[0,N_DISKS_TMP - 1]) (forall(j:int[0,N_DISKS_TMP - 1]) i != j imply system_state[i] != system_state[j])))</formula>
			<comment>No spawn or disappear of disk

Verifies properties:
P1. it never happens that a station holds more than 1 piece;
P2. it never happens that two pieces occupy the same belt slot.</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-06-01 08:33:13 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,4.503599627370496E15
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">0.0,1.0
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,0.9500559162941453
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">0.0,1.0
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,0.9500559162941453
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.04994408370585468
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,72.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,72.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=100] (&lt;&gt; forall(id:int[0,N_STATIONS - 1]) (station(id).Processing imply (!system_state_occupation(POS_STATIONS[id] - 1) &amp;&amp; system_state_occupation(POS_STATIONS[id]))))</formula>
			<comment>If a station is processing, no other piece is waiting to enter immediately before

Verifies property:
P1. It never happens that a station holds more than 1 piece.</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-06-01 08:33:52 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,4.503599627370496E15
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">0.0,1.0
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,0.9500559162941453
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">0.0,1.0
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,0.9500559162941453
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.04994408370585468
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,72.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,72.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=100] (&lt;&gt; forall(id:int[0, N_OUT_SENSORS - 1]) outSensor(id).Locked imply check_queue(id, POS_OUT_SENSORS[id]))</formula>
			<comment>If the sensor is locked, at least one position between it's input sensor and the location right before it is free

Verifies property:
P3. No queue ever exceeds the maximum allowed length.</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-06-01 08:34:20 +0200">
				<details>≥ 0.950056 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,4.503599627370496E15
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">0.0,1.0
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,0.9500559162941453
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.000000)" color="0xa0a0ff" encoding="csv">0.0,1.0
					</series>
					<series title="lower limit" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,0.9500559162941453
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.04994408370585468
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,72.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,72.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 72 in total, 72 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>Verifies property:
P4. the plant never incurs in deadlock.</comment>
			<result outcome="success" type="quality" timestamp="2023-05-31 19:28:54 +0200">
			</result>
		</query>
		<query>
			<formula/>
			<comment>------ Simulations ------</comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	station(0).Pre_processing + station(0).C2 + station(0).Processing * 2 + (station(0).Done + station(0).C3) * 3,
	station(1).Pre_processing + station(1).C2 + station(1).Processing * 2 + (station(1).Done + station(1).C3) * 3,
	station(2).Pre_processing + station(2).C2 + station(2).Processing * 2 + (station(2).Done + station(2).C3) * 3,
	station(3).Pre_processing + station(3).C2 + station(3).Processing * 2 + (station(3).Done + station(3).C3) * 3,
	station(4).Pre_processing + station(4).C2 + station(4).Processing * 2 + (station(4).Done + station(4).C3) * 3,
	station(5).Pre_processing + station(5).C2 + station(5).Processing * 2 + (station(5).Done + station(5).C3) * 3
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	outSensor(0).Locked + outSensor(0).C2,
	outSensor(1).Locked + outSensor(1).C2,
	outSensor(2).Locked + outSensor(2).C2,
	outSensor(3).Locked + outSensor(3).C2,
	outSensor(4).Locked + outSensor(4).C2
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000] {
	inSensor(0).Locked,
	inSensor(1).Locked,
	inSensor(2).Locked,
	inSensor(3).Locked,
	inSensor(4).Locked,
	inSensor(5).Locked
}</formula>
			<comment/>
		</query>
	</queries>
</nta>
